syntax = "proto3";
package cinc.te;
// defined from /rpc/input/ListTransportControllerEndpoints
message ListTransportControllerEndpointsQuery {
  string name = 1;
}
// defined from /rpc/input/AddTransportController/$ref/CreateTransportController
enum TransportControllerInterfaceType {
  TRANSPORTCONTROLLERINTERFACETYPE_RESTCONF = 1;
  TRANSPORTCONTROLLERINTERFACETYPE_REST = 2;
}
// defined from /rpc/input/AddTransportControllerEndpoint/$ref/TransportControllerGroup/$ref/TransportControllerEndpoint
enum TransportControllerInterfaceAuth {
  TRANSPORTCONTROLLERINTERFACEAUTH_NOAUTH = 1;
  TRANSPORTCONTROLLERINTERFACEAUTH_BASIC = 2;
}
// defined from /rpc/output/AddTransportControllerEndpointGroup
message TransportControllerGroupeCreateResponse {
  // The group name, free text
  // This is a REQUIRED attribute
  string name    = 1;
  // In addition to the HTTP return code, the result of the request is duplicated 
  // here.
  bool   success = 2;
}
// defined from /rpc/output/ListTransportControllerEndpointGroups/$ref
message TransportControllerGroupList {
  repeated TransportControllerGroupDescription entry = 1;
}
// defined from /rpc/input/AddTransportControllerEndpoint/$ref
message TransportControllerGroup {
  repeated TransportControllerEndpoint entry = 1;
}
// defined from /rpc/input/AddTransportControllerEndpoint/$ref/TransportControllerGroup/$ref
message TransportControllerEndpoint {
  // The authentification method used for the protocol.
  TransportControllerInterfaceAuth     authMethod   = 1 ;
  // Protocol used to connect to that instance.
  TransportControllerInterfaceProtocol accessMethod = 2 ;
  // Optional host name for display.
  string                               hostName     = 3 ;
  // The Ip address or hostname to which to connect.
  string                               ipAddr       = 4 ;
  // For access using HTTP or HTTPS, use this port to connect.
  uint64                               httpPort     = 5 ;
  // For future use, global reconnection parameters are specified in the 
  // transportController.
  uint64                               retry        = 6 ;
  // For future use, global reconnection parameters are specified in the 
  // transportController.
  uint64                               timeout      = 7 ;
  // The login used for the authentication.
  string                               login        = 8 ;
  // The encrypted password used for authentication.
  string                               password     = 9 ;
  // uuid.
  string                               id           = 10;
}
// defined from /rpc/output/AddTransportControllerEndpoint
message TransportControllerGroupUpdateResponse {
  // In addition to the HTTP return code, the result of the request is duplicated 
  // here.
  bool success = 1;
}
// defined from _undef
message NoParameters {
}
// defined from /rpc/input/AddTransportControllerEndpoint/$ref/TransportControllerGroup/$ref/TransportControllerEndpoint
enum TransportControllerInterfaceProtocol {
  TRANSPORTCONTROLLERINTERFACEPROTOCOL_HTTP = 1;
  TRANSPORTCONTROLLERINTERFACEPROTOCOL_HTTPS = 2;
}
// defined from /rpc/input/AddTransportController/$ref
message CreateTransportController {
  // Interval in seconds before reconnecting to the next transport controller 
  // instance.
  uint64                           reconnectTimeout = 1 ;
  // The URL to retrieve the transport topology.
  string                           topologyUrl      = 2 ;
  // Root URL for the Data models.
  string                           rootUrl          = 3 ;
  // identifier of the transport controller, which is fixed on creation and cannot 
  // be updated
  // This is a REQUIRED attribute
  string                           name             = 4 ;
  // The URL for getting SSE for updates.
  string                           notifyUrl        = 5 ;
  // The type of interface.
  TransportControllerInterfaceType interfaceType    = 6 ;
  // The URL that is checked  for controller liveliness detection.
  string                           pollUrl          = 7 ;
  // If several topologies are present in the transport controller, this parameter 
  // indicates which one is to be used as source of information for the IP layer.
  string                           topologyToUse    = 8 ;
  // The profile Name for use to get the device IPs.
  // This is a REQUIRED attribute
  string                           profileName      = 9 ;
  // The generated facility prefix for the SRLGs, by default the controller name.
  string                           srlgPrefix       = 10;
}
// defined from /rpc/input/AddTransportControllerEndpointGroup/$ref
message TransportControllerGroupDescription {
  // group name, in free text
  // This is a REQUIRED attribute
  string name = 1;
}
// defined from _undef
message OperationStatus {
  // HTTP status code
  uint64 status = 1;
}
// defined from /rpc/output/DeleteTransportControllerEndpoint
message TransportControllerEnpointsDeleteResponse {
  // In addition to the HTTP return code, the result of the request is duplicated 
  // here.
  bool success = 1;
}
// defined from /rpc/output/ListTransportControllers/$ref
message TransportControllerList {
  repeated TransportController entry = 1;
}
// defined from /rpc/input/UpdateTransportController/$ref
message UpdateTransportController {
}
// defined from /rpc/output/UpdateTransportControllerEndpoint
message TransportControllerEnpointsUpdateResponse {
  // In addition to the HTTP return code, the result of the request is duplicated 
  // here.
  bool success = 1;
}
// defined from /rpc/output/AddTransportController/$ref
message TransportController {
  // Interval in seconds before reconnecting to the next transport controller 
  // instance.
  uint64                           reconnectTimeout         = 1 ;
  // The URL to retrieve the transport topology.
  string                           topologyUrl              = 2 ;
  // Root URL for the Data models.
  string                           rootUrl                  = 3 ;
  // This is a REQUIRED attribute
  uint64                           transportControllerIndex = 4 ;
  // The URL for getting SSE for updates.
  string                           notifyUrl                = 5 ;
  // The type of interface.
  TransportControllerInterfaceType interfaceType            = 6 ;
  // The URL that is checked  for controller liveliness detection.
  string                           pollUrl                  = 7 ;
  // If several topologies are present in the transport controller, this parameter 
  // indicates which one is to be used as source of information for the IP layer.
  string                           topologyToUse            = 8 ;
  // The profile Name to use to get the device IPs.
  string                           profileName              = 9 ;
  // The generated facility prefix for the SRLGs, by default the controller name.
  string                           srlgPrefix               = 10;
  // identifier of the transport controller, which is fixed on creation and cannot 
  // be updated
  string                           name                     = 11;
}
// defined from /rpc/input/DeleteTransportController
message DeleteTransportControllerQuery {
  string transportControllerIndex = 1;
}
service TopologyService {
  rpc AddTransportController(CreateTransportController) returns (TransportController) {};
  rpc DeleteTransportController(DeleteTransportControllerQuery) returns (OperationStatus) {};
  rpc ListTransportControllers(NoParameters) returns (TransportControllerList) {};
  rpc UpdateTransportController(UpdateTransportController) returns (OperationStatus) {};
  rpc GetTransportController(DeleteTransportControllerQuery) returns (TransportController) {};

  //  RPC for transportControllerEndpoint
  rpc AddTransportControllerEndpoint(TransportControllerGroup) returns (TransportControllerGroupUpdateResponse) {};
  rpc ListTransportControllerEndpoints(ListTransportControllerEndpointsQuery) returns (TransportControllerGroup) {};
  rpc UpdateTransportControllerEndpoint(TransportControllerGroup) returns (TransportControllerEnpointsUpdateResponse) {};
  rpc DeleteTransportControllerEndpoint(TransportControllerGroup) returns (TransportControllerEnpointsDeleteResponse) {};

  //  RPC for transportControllerEndpointGroup
  rpc AddTransportControllerEndpointGroup(TransportControllerGroupDescription) returns (TransportControllerGroupeCreateResponse) {};
  rpc ListTransportControllerEndpointGroups(NoParameters) returns (TransportControllerGroupList) {};
  rpc DeleteTransportControllerEndpointGroup(TransportControllerGroupDescription) returns (OperationStatus) {};

}
