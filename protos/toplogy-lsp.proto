syntax = "proto3";
package cinc.te;
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspPlannedPathProperties/$ref
message PlannedPolicies {
  // LSP delay-based metric policies
  DelayBasedMetrics delayBasedMetrics = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref
message NodeList {
  repeated Node entry = 1;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspPlannedPathProperties/$ref
message CalendarSchema {
  // optional recurence description
  SchedulingRecurence recurrence = 1;
  // end time
  // This is a REQUIRED attribute
  string              endTime    = 2;
  // start time
  // This is a REQUIRED attribute
  string              startTime  = 3;
}
// defined from /rpc/input/SearchLsp
message SearchLspQuery {
  // object name, string without space, comma
  string     name       = 1;
  string     from       = 2;
  // Operational status
  OperStatus operStatus = 3;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols/NodePCEPProtocol
message NodePCEPProtocolSessionParameters {
  // The SR maximum Stack Depth (MSD) reported by the PCC
  uint64 maximumStackDepth = 1;
  // PCEP session DeadTimer time, in seconds
  uint64 deadtimer         = 2;
  // PCEP session keepalive time, in seconds
  uint64 keepalive         = 3;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspLivePathProperties/SignaledPath/SignaledEro/$ref/SREROHop/Nai/$ref/SRAdjacencyNetworkAddress
enum NaiType {
  NAITYPE_IPV4NODENAI = 1;
  NAITYPE_IPV6ADJACENCYNAI = 2;
  NAITYPE_IPV6NODENAI = 3;
  NAITYPE_IPV4ADJACENCYNAI = 4;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref
message NodeGeoProperties {
  // A GeoJSON Point, allowing crs and bbox
  NodeCoordinates coordinates = 1;
}
// defined from /rpc/output/ListMaintenances/$ref
message MaintenanceList {
  repeated Maintenance entry = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols/ISISLinkTEProperties
enum ISISLevel {
  ISISLEVEL_L1 = 1;
  ISISLEVEL_L2 = 2;
  ISISLEVEL_L1L2 = 3;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/$ref
// defined from /rpc/input/UpdateLink/$ref
message UpdateLink {
  // link type
  string    linkType  = 1;
  // Comment
  string    comment   = 2;
  // link name, which can be modified
  string    name      = 3;
  // link information from Z side
  // This is a REQUIRED attribute
  Interface endZ      = 4;
  // link identifier, generated by NorthStar
  string    id        = 5;
  // link information from A side
  // This is a REQUIRED attribute
  Interface endA      = 6;
  // program ID for link
  // This is a REQUIRED attribute
  uint64    linkIndex = 7;
}
// defined from /rpc/output/GetLinkHistory/$ref/LinkHistoryEventList/$ref
message LinkHistoryEvent {
  // Event Timestamp.
  uint64 timestamp = 1;
  oneof oneOf_1 {
    Link link      = 2;
  }
}
// defined from /rpc/output/AddMaintenance/$ref
message CreateMaintenance {
  // commnent
  string                      comment                      = 1;
  // List of elements part of this maintenance
  repeated MaintenanceElement elements                     = 2;
  // Maintenance name. The name can be modified, but must be unique.
  // This is a REQUIRED attribute
  string                      name                         = 3;
  bool                        autocomplete                 = 4;
  // User creating the maintenance
  string                      user                         = 5;
  // format: date-time
  // This is a REQUIRED attribute
  string                      startTime                    = 6;
  // If set to true, the rerouted LSPs will not be optimized again after the 
  // maintenance event is ended
  bool                        noReoptimizationOnCompletion = 7;
  // The planned end time of the maintenance, if autocomplete is set to true, the 
  // NorthStar Controller will complete the maintenance at that time.
  // format: date-time
  // This is a REQUIRED attribute
  string                      endTime                      = 8;
}
// defined from /rpc/output/GetLspHistory/$ref/LspHistoryEventList/$ref/LspHistoryEvent
enum TopoActionType {
  TOPOACTIONTYPE_FAILED = 1;
  TOPOACTIONTYPE_ADD = 2;
  TOPOACTIONTYPE_STATE_CHANGE = 3;
  TOPOACTIONTYPE_QUERY = 4;
  TOPOACTIONTYPE_UPDATE = 5;
  TOPOACTIONTYPE_REMOVE = 6;
}
// defined from /rpc/output/AddLsp/$ref/CreateLSPOrResponse
message RequestError {
  // error string, either free text or defined error
  string error = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref/NodeGeoProperties
message NodeCoordinates {
  repeated int64 coordinates = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols
message TransportLinkProperties {
  // For Transport inter-layer link, this contains the IP address of the interface 
  // the access link is connected to.
  Ipv4Reference    clientReference = 1;
  // Transport inter-layer link that is connected to that link through the 
  // transport network. This information is calculated from connectivity matrix
  LinkInterfaceRef remoteLinkInfo  = 2;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspCollectedPathProperties
message FrrProtectionFlag {
  // indicate if FRR local protection is requested for the LSP.
  bool                   enabled             = 1;
  FrrLocalProtectionType localProtectionType = 2;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols
message OSPFv3LinkTEProperties {
  uint64        metric   = 1;
  uint64        TEMetric = 2;
  repeated Srlg srlgs    = 3;
  uint64        area     = 4;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref/NodePrefixList/$ref/NodePrefix
message NodePrefixSR {
  // Index of the prefix in the global SR tables
  int64 index = 1;
  // Flags associated to this prefix, see 
  // draft-ietf-isis-segment-routing-extensions-07#section-2.1, Flags not defined 
  // for OSPF are 0
  int64 flags = 2;
  // Spring Algorithm (0 for ECMP-aware CSPF, 1 for strict ECMP aware CSPF)
  int64 algo  = 3;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspLivePathProperties//$ref
message RROHop {
  // for RRO Hops only, indicate if the protection is available
  bool                    protectionAvailable   = 1;
  // for RRO Hops only, indicate if the protection is active
  bool                    protectionInUse       = 2;
  oneof oneOf_1 {
    Ipv4Reference         ipv4Reference         = 3;
    UnnumberedIfReference unnumberedIfReference = 4;
  }
}
// defined from /rpc/input/UpdateNode/$ref/UpdateNode/$ref
message NodeProtocolUser {
  NodePCEPProtocolUser PCEP       = 1;
  NodeISISProtocol     ISIS       = 2;
  MgmtProtocols        management = 3;
  NodeOSPFProtocol     OSPF       = 4;
  // Represent the node Segment Routing (SR) parameters
  NodeSRProtocol       SR         = 5;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref
message LspPlannedPathProperties {
  // Comment
  string           comment                             = 1 ;
  AdminStatus      adminStatus                         = 2 ;
  LspColor         color                               = 3 ;
  string           lastStatusString                    = 4 ;
  // resulting IGP metric of the tunnel
  uint64           metric                              = 5 ;
  Bandwidth        bandwidth                           = 6 ;
  // Binding SID assigned to the LSP
  uint64           bindingSID                          = 7 ;
  DesignParameters design                              = 8 ;
  // Exclusions as ERO HOP list. The loose flag not considered.
  repeated EROHop  xro                                 = 9 ;
  ControllerStatus controllerStatus                    = 10;
  // Valid for SR LSP only. If set, the penultimate hop will be used as the 
  // destination of the tunnel, as seen by the PCC, while the Traffic engineering 
  // destination is the to. For instance in EPE TE engineering the real destination 
  // is in to (For instance ASBR in next AS), while the PCC should see the ASBR in 
  // the same AS for BGP route resolution. The address used by default is the 
  // te-router id of the penultimate hop. If a routing constraint (ero) does match 
  // that penultimate hop, the address specified in the routing contraint will be 
  // used.
  bool             usePenultimateHopAsSignalingAddress = 11;
  PlannedPolicies  policy                              = 12;
  // For SR-Tunnel there is no secondary LSP, the live status of the tunnel is 
  // mapped into the primary LSP definition. In order to evaluate correctly which 
  // path is currently in use this attibute indicate the pathName of the secondary 
  // LSP used. This attribute is not present for RSVP-LSPs. This attribute is not 
  // present if the primary definition is used. Not valid on POST/PUT
  string           pathDefinitionUsed                  = 13;
  CalendarSchema   bandwidthCalendar                   = 14;
  // Optional path name, fixed once LSP created
  string           pathName                            = 15;
  // parameter indicates the order (lowest first) in which secondary/standby 
  // te-lsps path are tried in case of active LSP failure, active LSPs before down 
  // LSPs
  uint64           preference                          = 16;
  // Desired exclusions path, as ERO HOP list. The loose flag not considered. --if 
  // not feasible NorthStar will calculate another path
  repeated EROHop  preferredXro                        = 17;
  // desired explicit path--if not feasible NorthStar will calculate another path
  repeated EROHop  preferredEro                        = 18;
  // Setup priority
  uint64           setupPriority                       = 19;
  // Hop count derived from RRO correlated to topology information. If the RRO 
  // contains a mix of node and link IP address, NorthStar is using its correlation 
  // to provide this number. This attribute is ignored on PUT or POST requests. Not 
  // valid on POST/PUT.
  uint64           correlatedRROHopCount               = 20;
  // path calculated by NorthStar, it does not include node ids. Not valid on 
  // POST/PUT
  repeated EROHop  calculatedEro                       = 21;
  // Holding priority
  uint64           holdingPriority                     = 22;
  // required explicit path
  repeated EROHop  ero                                 = 23;
  // routing operational status, when Down it means that no route has been found. 
  // Not valid on POST/PUT
  OperStatus       routingStatus                       = 24;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref
message LspLivePathProperties {
  AdminStatus           adminStatus        = 1 ;
  repeated RROHop       rro                = 2 ;
  // Indicates if a tunnel is FRR-protected or not
  FrrLiveProtectionFlag frrLocalProtection = 3 ;
  // Setup priority
  uint64                setupPriority      = 4 ;
  LspColor              color              = 5 ;
  // resulting IGP metric of the tunnel
  uint64                metric             = 6 ;
  Bandwidth             bandwidth          = 7 ;
  LspOperationalStatus  operationalStatus  = 8 ;
  // Optional path name, fixed once LSP created
  string                pathName           = 9 ;
  // Holding priority
  uint64                holdingPriority    = 10;
  // required explicit path
  repeated SignaledEro  ero                = 11;
  // the object carries a set of optional properties
  SignalingExtensions   options            = 12;
  // Binding SID assigned to the LSP
  uint64                bindingSID         = 13;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspLivePathProperties
message LspOperationalStatus {
  oneof oneOf_1 {
    OperStatus            operStatus            = 1;
    LspExtendedOperStatus lspExtendedOperStatus = 2;
  }
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/FacilityList/$ref
message Facility {
  // commnent
  string                   comment       = 1;
  // List of elements part of this facility
  repeated FacilityElement elements      = 2;
  // Facility name (can be modified)
  string                   name          = 3;
  // Identify who created the facility
  string                   source        = 4;
  // Program ID for facility
  // This is a REQUIRED attribute
  uint64                   facilityIndex = 5;
  // Identifier of the facility. This parameter is fixed on creation and cannot be 
  // updated or chenged. Default for a facility created from BGP-LS is the SRLG, 
  // and for user-created nodes is the name
  string                   id            = 6;
}
// defined from /rpc/input/BulkDeleteLsp/$ref/LspListDelete
message LspReference {
  // Program ID for lsp
  // This is a REQUIRED attribute
  uint64 lspIndex = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols
message NodePCEPProtocol {
  // Ipv4 address of pcc in xx.xx.xx.xx
  // format: ipv4
  string                            pccAddress                = 1;
  // remote peer pcep session parameters
  NodePCEPProtocolSessionParameters sessionParameters         = 2;
  // represents the remote peer advertised capabilites
  NodePCEPProtocolCapabilities      peerStatefullCapabilities = 3;
  // PCEP protocol operational status, Either Up or Down
  OperStatus                        operationalStatus         = 4;
  // forces NorthStar support of specific extensions
  NodePCEPProtocolExtensions        extensions                = 5;
}
// defined from /rpc/input/BulkDeleteLsp/$ref
message LspListDelete {
  // schema for bulk LSP delete, the number of entries that can be modified at a 
  // time is limited
  repeated LspReference entry = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols/TransportLinkProperties/$ref
message LinkInterfaceRef {
  // interface Ipv4 Address
  Ipv4Reference ipv4Address = 1;
  string        linkName    = 2;
  Node          node        = 3;
  // node local interface index
  uint64        ifIndex     = 4;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols
message NodeNETCONFProtocol {
  // remote peer NETCONF session parameters
  NodeNETCONFProtocolSessionParameters sessionParameters  = 1;
  // Ipv4 address of peer in xx.xx.xx.xx format
  // format: ipv4
  string                               clientAddress      = 2;
  // NETCONF protocol operational status, Either Up or Down
  OperStatus                           operationalStatus  = 3;
  repeated string                      clientCapabilities = 4;
  NETCONFOperationState                operationalState   = 5;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspLivePathProperties/SignaledPath/SignaledEro/$ref/SREROHop/Nai/$ref
message SRNodeNetworkAddress {
  string  address        = 1;
  NaiType topoObjectType = 2;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref
message UndefinedInterface {
  Node   node           = 1;
  // This is a REQUIRED attribute
  string address        = 2;
  // This is a REQUIRED attribute
  uint64 interfaceIndex = 3;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref/NodePrefixList/$ref/NodePrefix/$ref
message Ipv6Prefix {
  // prefix length
  int64  length  = 1;
  // format: ipv6
  // This is a REQUIRED attribute
  string address = 2;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols
message OSPFLinkTEProperties {
  uint64        metric   = 1;
  uint64        TEMetric = 2;
  repeated Srlg srlgs    = 3;
  uint64        area     = 4;
}
// defined from /rpc/input/AddMaintenance/$ref/Maintenance//$ref/MaintenanceElement/$ref
message MaintenanceElementIndex {
  // The index of the link, node or interface, depending on the type. If both id 
  // and index are specified, index takes precedence
  // This is a REQUIRED attribute
  uint64                 index          = 1;
  // This is a REQUIRED attribute
  MaintenanceElementType topoObjectType = 2;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp
enum LspLayer {
  LSPLAYER_IP = 1;
  LSPLAYER_TRANSPORT = 2;
}
// defined from /rpc/input/SearchNode
message SearchNodeQuery {
  // object name, string without space, comma
  string name = 1;
  string AS   = 2;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols/SRLinkProperties/$ref/SIDList/$ref
message AdjacencySegmentIdentifiers {
  // ISIS-Flags, the OSPF are mapped to the ISIS
  int64 flags  = 1;
  int64 weight = 2;
  int64 sid    = 3;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspPlannedPathProperties/$ref
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspLivePathProperties//$ref/RROHop/$ref
message UnnumberedIfReference {
  // This is a REQUIRED attribute
  string node      = 1;
  // This is a REQUIRED attribute
  uint64 ifIndex   = 2;
  // The Link name, if present
  string address   = 3;
  // Optional attribute, refer to the link index
  uint64 linkIndex = 4;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref
enum LspControlType {
  LSPCONTROLTYPE_PCC = 1;
  LSPCONTROLTYPE_DELEGATED = 2;
  LSPCONTROLTYPE_TRANSPORT = 3;
  LSPCONTROLTYPE_PCEINITIATED = 4;
}
// defined from /rpc/input/AddNode/$ref
message CreateNode {
  // Comment
  string                     comment          = 1 ;
  // node layer
  string                     layer            = 2 ;
  // correlated AS Number, may be present even if the node is not a BGP speaker
  ASNumber                   AutonomousSystem = 3 ;
  // node hardware type (any user string)
  string                     nodeType         = 4 ;
  // node name, which can be modified
  // This is a REQUIRED attribute
  string                     name             = 5 ;
  NodeDesignParameters       design           = 6 ;
  // node hostname
  string                     hostName         = 7 ;
  // Site ID of the node
  string                     site             = 8 ;
  repeated NodePrefix        prefixes         = 9 ;
  repeated Ipv4TaggedAddress extraIpAddresses = 10;
  // indicates if the node is a pseudo node created by the underlying IGP protocol
  bool                       pseudoNode       = 11;
  NodeProtocolUser           protocols        = 12;
  NodeGeoProperties          topology         = 13;
}
// defined from /rpc/input/AddMaintenance/$ref/Maintenance//$ref/MaintenanceElement/$ref/MaintenanceElementIndex/$ref
enum MaintenanceElementType {
  MAINTENANCEELEMENTTYPE_NODE = 1;
  MAINTENANCEELEMENTTYPE_LINK = 2;
  MAINTENANCEELEMENTTYPE_FACILITY = 3;
}
// defined from _undef
message NoParameters {
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref
message Link {
  // link type
  string               linkType             = 1 ;
  // Comment
  string               comment              = 2 ;
  // link information from Z side
  Interface            endZ                 = 3 ;
  // link name, which can be modified
  string               name                 = 4 ;
  // for links that are supported by a path in a bidirectional server layer this 
  // attribute reference a LSP index that represent that path in the server layer, 
  // this is the reference to the lspIndex
  int64                serverLayerReference = 5 ;
  LinkProtectionType   linkProtection       = 6 ;
  // link identifier, generated by NorthStar
  string               id                   = 7 ;
  // link information from A side
  Interface            endA                 = 8 ;
  // indicate if the link has properties coming from topology acquisition
  bool                 live                 = 9 ;
  // link operational status
  OperStatusAndPlanned operationalStatus    = 10;
  // link program ID
  uint64               linkIndex            = 11;
}
// defined from /rpc/input/SearchLink
message SearchLinkQuery {
  // object name, string without space, comma
  string name    = 1;
  string address = 2;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref
message Interface {
  // interface Ipv4 Address
  Ipv4Reference       ipv4Address      = 1 ;
  // This is a REQUIRED attribute
  Node                node             = 2 ;
  // User defined design properties
  DesignParameters    designParameters = 3 ;
  // MPLS local protection
  MPLSlocalProtection localProtection  = 4 ;
  string              name             = 5 ;
  // Link protection, if derived from transport topology it does also set the 
  // canFail parameter to false
  LinkProtectionType  linkProtection   = 6 ;
  // aggregated unreservedBw
  repeated Bandwidth  unreservedBw     = 7 ;
  // Coloring, Attributes, Affinity
  uint64              TEcolor          = 8 ;
  uint64              interfaceIndex   = 9 ;
  // Comment
  string              comment          = 10;
  // Link delay in millisecond
  int64               delay            = 11;
  Bandwidth           bandwidth        = 12;
  // aggregated TE metric
  uint64              TEmetric         = 13;
  repeated Srlg       srlgs            = 14;
  // node local interface index
  uint64              ifIndex          = 15;
  AdminStatus         adminStatus      = 16;
  // protocols configuration and information
  InterfaceProtocols  protocols        = 17;
  // interfaceName deduced from router configuration
  string              interfaceName    = 18;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref
message NodeDesignParameters {
  // node delay in milliseconds
  uint64                delay                   = 1;
  // the percentage of utilization that trigger a reroute based on analytics
  uint64                trafficRerouteThreshold = 2;
  // User metric
  int64                 userCost                = 3;
  NodeFailureSimulation simulation              = 4;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref
message Ipv4Reference {
  // This is a REQUIRED attribute
  string address = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface
message InterfaceProtocols {
  ISISLinkTEProperties    ISIS      = 1;
  // SR properties
  SRLinkProperties        SR        = 2;
  OSPFv3LinkTEProperties  OSPFv3    = 3;
  OSPFLinkTEProperties    OSPF      = 4;
  TransportLinkProperties transport = 5;
  RSVPLinkTEProperties    RSVP      = 6;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref
enum LinkProtectionType {
  LINKPROTECTIONTYPE_1_PLUS_1 = 1;
  LINKPROTECTIONTYPE_UNPROTECTED = 2;
  LINKPROTECTIONTYPE_ENHANCED = 3;
  LINKPROTECTIONTYPE_SHARED = 4;
  LINKPROTECTIONTYPE_1_FOR_1 = 5;
  LINKPROTECTIONTYPE_EXTRA_TRAFFIC = 6;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref
enum LspPathType {
  LSPPATHTYPE_STANDBY = 1;
  LSPPATHTYPE_PRIMARY = 2;
  LSPPATHTYPE_SECONDARY = 3;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspPlannedPathProperties/$ref/CalendarSchema
message SchedulingRecurence {
  // Frequency, possibly one of SECONDLY MINUTELY HOURLY DAILY WEEKLY MONTHLY 
  // YEARLY, however actual support is restricted to DAILY
  // This is a REQUIRED attribute
  RecurenceFrequency FREQ     = 1;
  // Only daily, every day recurence is supported
  uint64             INTERVAL = 2;
  string             UNTIL    = 3;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols/NodePCEPProtocol
message NodePCEPProtocolExtensions {
  // Support for Primary/Secondary LSP using 
  // draft-ananthakrishnan-pce-stateful-path-protection-00.
  bool lsp_association_protection = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols
message ISISLinkTEProperties {
  uint64        metricL1 = 1;
  uint64        metricL2 = 2;
  ISISLevel     level    = 3;
  // aggregated metric, if both level are present this is L2
  uint64        metric   = 4;
  uint64        TEMetric = 5;
  repeated Srlg srlgs    = 6;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspLivePathProperties/SignaledPath/SignaledEro/$ref/EROHop/$ref
message HopWithId {
  // object id
  // This is a REQUIRED attribute
  string     id             = 1;
  // This is a REQUIRED attribute
  EroHopType topoObjectType = 2;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref
message FacilityList {
  repeated Facility entry = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols
message NodeSRProtocol {
  // If true the node can be used to route SR Tunnels. This flag is set to true if 
  // the node has SRGB and a node index (Prefix with routerId role and SR 
  // properties)
  bool               enabled          = 1;
  // List of SRG Ranges
  repeated SRGBRange SRGBs            = 2;
  // The Node capabilities, as defined in 
  // draft-ietf-isis-segment-routing-extensions-07#section-3, 
  // draft-ietf-ospf-ospfv3-segment-routing-extensions-05#section-3.3
  uint64             nodeCapabilities = 3;
}
// defined from /rpc/output/AddLsp/$ref
message CreateLSPOrResponse {
  oneof oneOf_1 {
    Lsp          lsp   = 1;
    RequestError error = 2;
  }
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspLivePathProperties/SignaledPath/SignaledEro/$ref
message SREROHop {
  // the adjacency SID
  uint64     sid            = 1;
  Nai        nai            = 2;
  // indicates if the Hop is a loose Hop
  bool       loose          = 3;
  // This is a REQUIRED attribute
  EroHopType topoObjectType = 4;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspLivePathProperties/$ref
message LspColor {
  oneof oneOf_1 {
    string stringValue = 1;
    int64  intValue    = 2;
  }
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols/NodeSRProtocol/
message SRGBRange {
  uint64 start = 1;
  uint64 range = 2;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref
message Lsp {
  // node configured P2MP name
  string                     p2mpName                    = 1 ;
  // Read-Only. Destination of the tunnel, as seen by the PCC, for EPE TE 
  // engineering the real destination is in to (For instance ASBR in next AS), 
  // while the PCC should see the ASBR in the same AS for BGP route resolution. 
  // This is the result of the  
  // plannedProperties/usePenultimateHopAsSignalingAddress.
  ToSignalingAddress         toSignalingAddress          = 2 ;
  // indicate if the LSP is a real LSP or the representation of a transport path
  LspLayer                   layer                       = 3 ;
  // state of the path in the PCC, which is read-only
  LspLivePathProperties      liveProperties              = 4 ;
  // tunnel source address, should reference an interface or a node, same for all 
  // TE-LSP of a tunnel
  LspEndpoint                from                        = 5 ;
  // tunnel name, several TE-LSP may have the same name, they are part of the same 
  // tunnel
  string                     name                        = 6 ;
  // signaling protocol p2mp tunnel id, may be empty, same for all TE-LSP of a p2mp 
  // tree
  uint64                     p2mpIndex                   = 7 ;
  LspConfigurationProtocol   creationConfigurationMethod = 8 ;
  string                     initiator                   = 9 ;
  LspPathType                pathType                    = 10;
  // planned path state, this attribute is read-write, can be modified in an update
  LspPlannedPathProperties   plannedProperties           = 11;
  // tunnel destination, should reference an interface or a node, same for all 
  // TE-LSP of a tunnel
  LspEndpoint                to                          = 12;
  LspController              controller                  = 13;
  LspOperationalStatus       operationalStatus           = 14;
  LspControlType             controlType                 = 15;
  // signaling protocol tunnel id, can be left empty, same for all TE-LSP of a 
  // tunnel
  uint64                     tunnelId                    = 16;
  LspProvisioningType        provisioningType            = 17;
  // Path State (config and operationalState) from device Collection. Read-only and 
  // ignored on PUT/POST
  LspCollectedPathProperties collectedProperties         = 18;
  // Program ID for lsp
  // This is a REQUIRED attribute
  uint64                     lspIndex                    = 19;
}
// defined from /rpc/input/GetNode
message GetNodeQuery {
  // TE App object index
  uint64 objectIndex = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref
message SrlgList {
  repeated Srlg entry = 1;
}
// defined from /rpc/input/AddMaintenance/$ref/Maintenance//$ref
message MaintenanceElement {
  oneof oneOf_1 {
    MaintenanceElementIndex maintenanceElementIndex = 1;
    MaintenanceElementId    maintenanceElementId    = 2;
  }
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols/NodePCEPProtocol/$ref
enum OperStatus {
  OPERSTATUS_DOWN = 1;
  OPERSTATUS_UNKNOWN = 2;
  OPERSTATUS_UP = 3;
  OPERSTATUS_EMPTY = 4;
}
// defined from /rpc/output/GetLspHistory/$ref
message LspHistoryEventList {
  repeated LspHistoryEvent entry = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref/NodePrefixList/$ref
message NodePrefix {
  NodePrefixSR SR         = 1;
  // indicate the role of the address when its derived from a particular protocol, 
  // for instance routerID, teRouterID, ipv6address,..etc
  string       role       = 2;
  oneof oneOf_1 {
    Ipv4Prefix ipv4Prefix = 3;
    Ipv6Prefix ipv6Prefix = 4;
  }
}
// defined from /rpc/input/AddMaintenance/$ref
message Maintenance {
  MaintenanceStatus           status                       = 1 ;
  // commnent
  string                      comment                      = 2 ;
  // format: date-time
  // This is a REQUIRED attribute
  string                      endTime                      = 3 ;
  // Maintence name
  string                      name                         = 4 ;
  // Program ID for maintenance
  // This is a REQUIRED attribute
  uint64                      maintenanceIndex             = 5 ;
  bool                        autocomplete                 = 6 ;
  // List of elements part of this maintenance
  repeated MaintenanceElement elements                     = 7 ;
  // User creating the maintenance
  string                      user                         = 8 ;
  // format: date-time
  // This is a REQUIRED attribute
  string                      startTime                    = 9 ;
  // If set to true, the rerouted LSPs will not be optimized again after the 
  // maintenance event is ended
  bool                        noReoptimizationOnCompletion = 10;
}
// defined from /rpc/input/UpdateNode/$ref/UpdateNode/$ref/NodeProtocolUser
message NodePCEPProtocolUser {
  // forces NorthStar support of specific extensions
  NodePCEPProtocolExtensions extensions = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/FacilityList/$ref/Facility//$ref
message FacilityElement {
  // The id of the link, node or interface, depending on the type
  // This is a REQUIRED attribute
  string              id             = 1;
  // This is a REQUIRED attribute
  FacilityElementType topoObjectType = 2;
}
// defined from /rpc/input/BulkDeleteNode/$ref
message NodeListDelete {
  // schema for bulk node delete, the number of entries that can be modified at a 
  // time is limited
  repeated uint64 entry = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref
message Node {
  // Comment
  string                     comment             = 1 ;
  // node layer
  string                     layer               = 2 ;
  // node hostname
  string                     hostName            = 3 ;
  // node site ID
  string                     site                = 4 ;
  NodeDesignParameters       design              = 5 ;
  // nose identifier, which is fixed on creation and cannot be updated. For Nodes 
  // created from BGP-LS, this defaults to the node router-id, for user-created 
  // nodes this default from the name
  // This is a REQUIRED attribute
  string                     id                  = 6 ;
  // node program ID
  uint64                     nodeIndex           = 7 ;
  repeated NodePrefix        prefixes            = 8 ;
  // indicate if the node has properties coming from topology acquisition
  bool                       live                = 9 ;
  // router ID derived from protocols or device collection, read only
  // format: ipv4
  string                     routerId            = 10;
  // node hardware type (any user string)
  string                     nodeType            = 11;
  // correlated AS Number, may be present even if the node is not a BGP speaker
  ASNumber                   AutonomousSystem    = 12;
  // protocols configuration and information on the node
  NodeProtocols              protocols           = 13;
  NodeGeoProperties          topology            = 14;
  repeated Ipv4TaggedAddress extraIpAddresses    = 15;
  // indicates if the node is a pseudo node created by the underlying IGP protocol
  bool                       pseudoNode          = 16;
  // node name, which can be modified
  string                     name                = 17;
  // For logical system discovered using CLI/Netconf data, this is set for logical 
  // system and contains the hostname of the logical system parent (i.e real 
  // router). This property is read-only
  string                     logicalSystemParent = 18;
  // IPv6 router ID derived from  device collection, read only
  // format: ipv6
  string                     routerIdIPv6        = 19;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspLivePathProperties/SignaledPath/SignaledEro/$ref/SREROHop/Nai/$ref
message SRAdjacencyNetworkAddress {
  string  remoteAddress  = 1;
  string  localAddress   = 2;
  NaiType topoObjectType = 3;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols
message NodeISISProtocol {
  // format: ipv6
  string routerId    = 1;
  string isoAddress  = 2;
  // ISIS overload bit set (from device collection)
  bool   overloadBit = 3;
  // format: ipv6
  string TERouterId  = 4;
  string area        = 5;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref
message NodePrefixList {
  repeated NodePrefix entry = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref
message LinkList {
  repeated Link entry = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref
message ASNumber {
  // This is a REQUIRED attribute
  uint64 asNumber = 1;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspPlannedPathProperties/$ref/PlannedPolicies
message DelayBasedMetrics {
  // High delay Threshold: when the calculated delay is greater than the threshold, 
  // the LSP is configured using the highDelayMetric
  // This is a REQUIRED attribute
  uint64 highDelayThreshold = 1;
  // Low delay Threshold: when the calculated delay is lower than the threshold, 
  // the LSP is configured using the metric if set (otherwise the LSP live metric)
  // This is a REQUIRED attribute
  uint64 lowDelayThreshold  = 2;
  // High metric value
  // This is a REQUIRED attribute
  uint64 highDelayMetric    = 3;
  // Low metric value
  uint64 lowDelayMetric     = 4;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref
enum LspProvisioningType {
  LSPPROVISIONINGTYPE_SR = 1;
  LSPPROVISIONINGTYPE_RSVP = 2;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node//$ref
message Ipv4TaggedAddress {
  // format: ipv4
  // This is a REQUIRED attribute
  string address = 1;
  string tag     = 2;
}
// defined from /rpc/output/GetLinkHistory/$ref
message LinkHistoryEventList {
  repeated LinkHistoryEvent entry = 1;
}
// defined from /rpc/output/GetTopology/$ref
message Topology {
  // all nodes
  repeated Link     links      = 1;
  // facilities
  repeated Facility facilities = 2;
  // all nodes
  repeated Node     nodes      = 3;
}
// defined from /rpc/input/AddMaintenance/$ref/Maintenance//$ref/MaintenanceElement/$ref
message MaintenanceElementId {
  // The id of the link, node or interface, depending on the type
  // This is a REQUIRED attribute
  string                 id             = 1;
  // This is a REQUIRED attribute
  MaintenanceElementType topoObjectType = 2;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref
message UnreservedBw {
  // Unreserved bandwidth array
  repeated Bandwidth entry = 1;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspPlannedPathProperties
message ControllerStatus {
  // String representing the Path Computation Server status
  string status  = 1;
  // Optional indication of which event triggered the current status
  string trigger = 2;
  // Indication when the next action will be done
  string time    = 3;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols
message RSVPLinkTEProperties {
  Bandwidth bandwidth = 1;
}
// defined from _undef
message OperationStatus {
  // HTTP status code
  uint64 status = 1;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref
message CreateLsp {
  // node configured P2MP name
  string                     p2mpName                    = 1 ;
  // Read-Only. Destination of the tunnel, as seen by the PCC, for EPE TE 
  // engineering the real destination is in to (For instance ASBR in next AS), 
  // while the PCC should see the ASBR in the same AS for BGP route resolution. 
  // This is the result of the  
  // plannedProperties/usePenultimateHopAsSignalingAddress.
  ToSignalingAddress         toSignalingAddress          = 2 ;
  // indicate if the LSP is a real LSP or the representation of a transport path
  LspLayer                   layer                       = 3 ;
  // state of the path in the PCC, which is read-only
  LspLivePathProperties      liveProperties              = 4 ;
  // tunnel source address, should reference an interface or a node, same for all 
  // TE-LSP of a tunnel
  LspEndpoint                from                        = 5 ;
  // tunnel name, several TE-LSP may have the same name, they are part of the same 
  // tunnel
  string                     name                        = 6 ;
  // signaling protocol p2mp tunnel id, may be empty, same for all TE-LSP of a p2mp 
  // tree
  uint64                     p2mpIndex                   = 7 ;
  LspConfigurationProtocol   creationConfigurationMethod = 8 ;
  string                     initiator                   = 9 ;
  LspPathType                pathType                    = 10;
  // planned path state, this attribute is read-write, can be modified in an update
  LspPlannedPathProperties   plannedProperties           = 11;
  // tunnel destination, should reference an interface or a node, same for all 
  // TE-LSP of a tunnel
  LspEndpoint                to                          = 12;
  LspController              controller                  = 13;
  LspOperationalStatus       operationalStatus           = 14;
  LspControlType             controlType                 = 15;
  // signaling protocol tunnel id, can be left empty, same for all TE-LSP of a 
  // tunnel
  uint64                     tunnelId                    = 16;
  LspProvisioningType        provisioningType            = 17;
  // Path State (config and operationalState) from device Collection. Read-only and 
  // ignored on PUT/POST
  LspCollectedPathProperties collectedProperties         = 18;
  // Program ID for lsp
  // This is a REQUIRED attribute
  uint64                     lspIndex                    = 19;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref
message LspCollectedPathProperties {
  // Comment
  string            comment                 = 1 ;
  AdminStatus       adminStatus             = 2 ;
  LspColor          color                   = 3 ;
  string            lastStatusString        = 4 ;
  // resulting IGP metric of the tunnel
  uint64            metric                  = 5 ;
  // Explicit path name
  string            explicitPathName        = 6 ;
  Bandwidth         bandwidth               = 7 ;
  // Binding SID assigned to the LSP
  uint64            bindingSID              = 8 ;
  DesignParameters  design                  = 9 ;
  // Exclusions as ERO HOP list. The loose flag not considered.
  repeated EROHop   xro                     = 10;
  // Read-only, Indicates if a LSP is FRR-protected or not. This is for the 
  // Protected LSP.
  FrrProtectionFlag frrLocalProtection      = 11;
  ControllerStatus  controllerStatus        = 12;
  // Describe when the collection took place
  uint64            timestamp               = 13;
  // Operational Path, please note that its reported as an ERO hop list from 
  // parser.
  repeated EROHop   rro                     = 14;
  // parameter indicates the order (lowest first) in which secondary/standby 
  // te-lsps path are tried in case of active LSP failure, active LSPs before down 
  // LSPs
  uint64            preference              = 15;
  // Desired exclusions path, as ERO HOP list. The loose flag not considered. --if 
  // not feasible NorthStar will calculate another path
  repeated EROHop   preferredXro            = 16;
  // Read-only, Indicates if a LSP a bypass. This is for the Protecting LSP.
  FrrProtectingFlag frrProtectingAttributes = 17;
  // desired explicit path
  repeated EROHop   preferredEro            = 18;
  // Setup priority
  uint64            setupPriority           = 19;
  // Hop count derived from RRO correlated to topology information. If the RRO 
  // contains a mix of node and link IP address, NorthStar is using its correlation 
  // to provide this number. This attribute is ignored on PUT or POST requests. Not 
  // valid on POST/PUT.
  uint64            correlatedRROHopCount   = 20;
  // the path calculated by NorthStar, it does not include node ids
  repeated EROHop   calculatedEro           = 21;
  // Holding priority
  uint64            holdingPriority         = 22;
  // required explicit path
  repeated EROHop   ero                     = 23;
  // routing operational status, when Down it means that no route has been found. 
  // Not valid on POST/PUT
  OperStatus        routingStatus           = 24;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols/NodeNETCONFProtocol
message NodeNETCONFProtocolSessionParameters {
  // session keepalive time, in seconds
  uint64 keepalive = 1;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspPlannedPathProperties/$ref/CalendarSchema/SchedulingRecurence
enum RecurenceFrequency {
  RECURENCEFREQUENCY_DAILY = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols/$ref
message MgmtProtocols {
  // operating system Version
  string operatingSystemVersion = 1;
  // Vendor
  string vendor                 = 2;
  // operating system information
  string operatingSystem        = 3;
  // management IP address
  // format: ipv4
  string address                = 4;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref/NodeDesignParameters
message NodeFailureSimulation {
  bool canFail = 1;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspLivePathProperties
message SignaledPath {
  // required explicit path
  repeated SignaledEro entry = 1;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspLivePathProperties/SignaledPath
message SignaledEro {
  oneof oneOf_1 {
    EROHop   EROHop   = 1;
    SREROHop SREROHop = 2;
  }
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/$ref
enum OperStatusAndPlanned {
  OPERSTATUSANDPLANNED_DOWN = 1;
  OPERSTATUSANDPLANNED_UNKNOWN = 2;
  OPERSTATUSANDPLANNED_UP = 3;
  OPERSTATUSANDPLANNED_EMPTY = 4;
  OPERSTATUSANDPLANNED_PLANNED = 5;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp
message ToSignalingAddress {
  oneof oneOf_1 {
    Ipv4Reference ipv4Reference = 1;
  }
}
// defined from /rpc/input/AddMaintenance/$ref/Maintenance/$ref
enum MaintenanceStatus {
  MAINTENANCESTATUS_CANCELLED = 1;
  MAINTENANCESTATUS_DELETED = 2;
  MAINTENANCESTATUS_COMPLETED = 3;
  MAINTENANCESTATUS_PLANNED = 4;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspLivePathProperties/SignaledPath/SignaledEro/$ref/SREROHop
message Nai {
  oneof oneOf_1 {
    SRAdjacencyNetworkAddress SRAdjacencyNetworkAddress = 1;
    SRNodeNetworkAddress      SRNodeNetworkAddress      = 2;
  }
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref
enum LspController {
  LSPCONTROLLER_NORTHSTAR = 1;
  LSPCONTROLLER_EXTERNAL = 2;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspCollectedPathProperties
message FrrProtectingFlag {
  FrrLocalProtectionType localProtectionType = 1;
}
// defined from /rpc/input/BulkAddLsp/$ref
message CreateLSPList {
  // schema for bulk LSP creation, the number of entries that can be modified at a 
  // time is limited
  repeated Lsp entry = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols
message NodeBGPProtocol {
  // default AS
  ASNumber AutonomousSystem = 1;
  string   id               = 2;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspLivePathProperties
message SignalingExtensions {
  // Read-only parameter, indicates if auto-bandwidth is activated on the LSP. 
  // Valid only on Juniper Routers. When set the bandwidth is controlled by the 
  // PCC, bandwidth set from REST or UI is ignored.
  bool   autoBandwidth = 1;
  // Read-only parameter, indicates if the TE-LSP is part of a TE++ LSp setup. All 
  // TE-LSPs in the same TE++Group share the same TE++Id
  uint64 TEPlusPlusId  = 2;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref
enum AdminStatus {
  ADMINSTATUS_DOWN = 1;
  ADMINSTATUS_UNKNOWN = 2;
  ADMINSTATUS_UP = 3;
  ADMINSTATUS_PLANNED = 4;
}
// defined from /rpc/input/BulkAddNode/$ref
message CreateNodeList {
  // schema for bulk NODE creation, the number of entries that can be modified at a 
  // time is limited
  repeated CreateNode entry = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref/NodePrefixList/$ref/NodePrefix/$ref
message Ipv4Prefix {
  // prefix length
  int64  length  = 1;
  // format: ipv4
  // This is a REQUIRED attribute
  string address = 2;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node//$ref
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp
message LspEndpoint {
  oneof oneOf_1 {
    Ipv4Reference ipv4Reference = 1;
  }
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspCollectedPathProperties/FrrProtectionFlag/$ref
enum FrrLocalProtectionType {
  FRRLOCALPROTECTIONTYPE_DETOUR = 1;
  FRRLOCALPROTECTIONTYPE_NHOP_BYPASS = 2;
  FRRLOCALPROTECTIONTYPE_NNHOP_BYPASS = 3;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols
message SRLinkProperties {
  repeated AdjacencySegmentIdentifiers SIDs = 1;
}
// defined from /rpc/input/AddLink/$ref
message CreateLink {
  // link type
  string    linkType = 1;
  // Comment
  string    comment  = 2;
  // link name, which can be modified
  string    name     = 3;
  // link information from Z side
  // This is a REQUIRED attribute
  Interface endZ     = 4;
  // link information from A side
  // This is a REQUIRED attribute
  Interface endA     = 5;
}
// defined from /rpc/output/SearchLsp/$ref
message LspList {
  repeated Lsp entry = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols/SRLinkProperties/$ref
message SIDList {
  repeated AdjacencySegmentIdentifiers entry = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols
message NodeOSPFProtocol {
  // format: ipv4
  string routerId    = 1;
  // OSPF reference bandwidth (read-only,from device collection)
  int64  referenceBw = 2;
  // format: ipv4
  string TERouterId  = 3;
  // OSPF overload bit set (from device collection)
  bool   overloadBit = 4;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/SrlgList/$ref
message Srlg {
  string srlgName  = 1;
  uint64 srlgValue = 2;
}
// defined from /rpc/input/UpdateNode/$ref
message UpdateNode {
  // Comment
  string                     comment          = 1 ;
  // Program ID for node
  // This is a REQUIRED attribute
  uint64                     nodeIndex        = 2 ;
  // node layer
  string                     layer            = 3 ;
  // correlated AS Number, may be present even if the node is not a BGP speaker
  ASNumber                   AutonomousSystem = 4 ;
  // indicates if the node is a pseudo node created by the underlying IGP protocol
  bool                       pseudoNode       = 5 ;
  // node name, which can be modified
  string                     name             = 6 ;
  NodeDesignParameters       design           = 7 ;
  // node hostname
  string                     hostName         = 8 ;
  // Site ID of the node
  string                     site             = 9 ;
  repeated NodePrefix        prefixes         = 10;
  repeated Ipv4TaggedAddress extraIpAddresses = 11;
  // hardware node type (any user string)
  string                     nodeType         = 12;
  // node identifier, which is fixed on creation and cannot be updated--default for 
  // Nodes created from BGP-LS is the node router-id, for user-created nodes it is 
  // the name
  string                     id               = 13;
  NodeProtocolUser           protocols        = 14;
  NodeGeoProperties          topology         = 15;
}
// defined from /rpc/input/GetLinkHistory
message GetLinkHistoryQuery {
  // TE App object index
  uint64 objectIndex = 1;
  string start       = 2;
  string end         = 3;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node
message NodeProtocols {
  NodePCEPProtocol    PCEP       = 1;
  // Netconf provisioning protocol status
  NodeNETCONFProtocol NETCONF    = 2;
  MgmtProtocols       management = 3;
  NodeISISProtocol    ISIS       = 4;
  // Represent the node Segment Routing (SR) parameters
  NodeSRProtocol      SR         = 5;
  NodeBGPProtocol     BGP        = 6;
  NodeOSPFProtocol    OSPF       = 7;
}
// defined from /rpc/output/GetLspHistory/$ref/LspHistoryEventList/$ref
message LspHistoryEvent {
  // A description of the event
  string                   eventStatusString = 1;
  string                   initiator         = 2;
  // Event Timestamp.
  uint64                   timestamp         = 3;
  LspPathType              pathType          = 4;
  // planned path state, this attribute is read-write, those attributes can be 
  // modified in an update
  LspPlannedPathProperties plannedProperties = 5;
  LspController            controller        = 6;
  LspControlType           controlType       = 7;
  // Type of operation.
  TopoActionType           operation         = 8;
  LspProvisioningType      provisioningType  = 9;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface
enum MPLSlocalProtection {
  MPLSLOCALPROTECTION_LINK = 1;
  MPLSLOCALPROTECTION_NODELINK = 2;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref
enum LspConfigurationProtocol {
  LSPCONFIGURATIONPROTOCOL_PCEP = 1;
  LSPCONFIGURATIONPROTOCOL_NETCONF = 2;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspLivePathProperties/LspOperationalStatus/$ref
enum LspExtendedOperStatus {
  LSPEXTENDEDOPERSTATUS_ACTIVE = 1;
  LSPEXTENDEDOPERSTATUS_GOINGUP = 2;
  LSPEXTENDEDOPERSTATUS_GOINGDOWN = 3;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface
message DesignParameters {
  // Indicate if the link can fail or not. This parameter is evaluated when routing 
  // LSP with useProtectedLinks set to Protected.
  bool   canFail                   = 1;
  // Unit: milliseconds. Latency increment that trigger LSP rerouting. If the link 
  // latency increase more than the value between two collection, the LSPs on that 
  // link will be rerouted
  uint64 latencyIncrementThreshold = 2;
  // If the packet loss on the link exceed the value, the LSPs on the link will be 
  // rerouted.
  uint64 packetLossThreshold       = 3;
  // link distance, unit:?
  uint64 distance                  = 4;
  // The percentage of utilization that trigger a reroute based on analytics
  uint64 trafficRerouteThreshold   = 5;
  // User metric
  uint64 userCost                  = 6;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols/NodeNETCONFProtocol
enum NETCONFOperationState {
  NETCONFOPERATIONSTATE_SESSION_CLOSE = 1;
  NETCONFOPERATIONSTATE_CONNECTING = 2;
  NETCONFOPERATIONSTATE_DISCONNECTED = 3;
  NETCONFOPERATIONSTATE_DELETED = 4;
  NETCONFOPERATIONSTATE_CONNECTED = 5;
  NETCONFOPERATIONSTATE_INVALID_CREDENTIALS = 6;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspLivePathProperties/SignaledPath/SignaledEro/$ref/EROHop/$ref/HopWithId
enum EroHopType {
  EROHOPTYPE_SID = 1;
  EROHOPTYPE_ADJACENCYSID = 2;
  EROHOPTYPE_HOPID = 3;
  EROHOPTYPE_NODESID = 4;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/UnreservedBw/$ref
message Bandwidth {
  oneof oneOf_1 {
    string strValue = 1;
    uint64 intValue = 2;
  }
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspLivePathProperties
message FrrLiveProtectionFlag {
  // indicate if local protection is requested for the LSP.
  bool enabled = 1;
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols/NodePCEPProtocol
message NodePCEPProtocolCapabilities {
  // Stateful PCE P2MP LSP Update
  bool p2mpUpdate        = 1;
  // Segment Routing capability
  bool SRCapability      = 2;
  // Stateful PCE P2MP LSP Create
  bool p2mpInstantiation = 3;
  // Stateful PCE LSP Update
  bool lspUpdate         = 4;
  // Stateful PCE LSP Create
  bool lspInstantiation  = 5;
  // Stateful PCE P2MP LSP reporting
  bool p2mp              = 6;
}
// defined from /rpc/output/SearchLsp/$ref/LspList/$ref/Lsp/$ref/LspLivePathProperties/SignaledPath/SignaledEro/$ref
message EROHop {
  // indicates if the Hop is a loose Hop
  bool                    loose                 = 1;
  oneof oneOf_1 {
    Ipv4Reference         ipv4Reference         = 2;
    UnnumberedIfReference unnumberedIfReference = 3;
    HopWithId             hopWithId             = 4;
  }
}
// defined from /rpc/output/GetTopology/$ref/Topology/$ref/FacilityList/$ref/Facility//$ref/FacilityElement
enum FacilityElementType {
  FACILITYELEMENTTYPE_NODE = 1;
  FACILITYELEMENTTYPE_INTERFACE = 2;
  FACILITYELEMENTTYPE_LINK = 3;
}
service TopologyService {
  rpc GetTopology(NoParameters) returns (Topology) {};

  //  RPC for node
  rpc SearchNode(SearchNodeQuery) returns (NodeList) {};
  rpc GetNode(GetNodeQuery) returns (Node) {};
  rpc BulkDeleteNode(NodeListDelete) returns (OperationStatus) {};
  rpc ListNodes(NoParameters) returns (NodeList) {};
  rpc UpdateNode(UpdateNode) returns (Node) {};
  rpc AddNode(CreateNode) returns (Node) {};
  rpc BulkAddNode(CreateNodeList) returns (NodeList) {};
  rpc DeleteNode(GetNodeQuery) returns (OperationStatus) {};

  //  RPC for maintenance
  rpc AddMaintenance(Maintenance) returns (CreateMaintenance) {};
  rpc DeleteMaintenance(GetNodeQuery) returns (OperationStatus) {};
  rpc ListMaintenances(NoParameters) returns (MaintenanceList) {};
  rpc GetMaintenance(GetNodeQuery) returns (Maintenance) {};

  //  RPC for facility
  rpc AddFacility(Facility) returns (OperationStatus) {};
  rpc DeleteFacility(GetNodeQuery) returns (OperationStatus) {};
  rpc ListFacilities(NoParameters) returns (FacilityList) {};
  rpc UpdateFacility(Facility) returns (OperationStatus) {};
  rpc GetFacility(GetNodeQuery) returns (Facility) {};

  //  RPC for link
  rpc SearchLink(SearchLinkQuery) returns (LinkList) {};
  rpc GetLink(GetNodeQuery) returns (Link) {};
  rpc ListLinks(NoParameters) returns (LinkList) {};
  rpc UpdateLink(UpdateLink) returns (Link) {};
  rpc AddLink(CreateLink) returns (Link) {};
  rpc DeleteLink(GetNodeQuery) returns (OperationStatus) {};


  rpc GetLinkDevice(GetNodeQuery) returns (Link) {};

  rpc GetLinkHistory(GetLinkHistoryQuery) returns (LinkHistoryEventList) {};

  rpc GetLinkBgpLs(GetNodeQuery) returns (Link) {};

  rpc GetLinkUser(GetNodeQuery) returns (Link) {};

  //  RPC for lsp
  rpc SearchLsp(SearchLspQuery) returns (LspList) {};
  rpc GetLsp(GetNodeQuery) returns (Lsp) {};
  rpc BulkDeleteLsp(LspListDelete) returns (OperationStatus) {};
  rpc ListLsps(NoParameters) returns (LspList) {};
  rpc AddLsp(Lsp) returns (CreateLSPOrResponse) {};
  rpc BulkAddLsp(CreateLSPList) returns (LspList) {};
  rpc DeleteLsp(GetNodeQuery) returns (OperationStatus) {};


  rpc GetLspHistory(GetLinkHistoryQuery) returns (LspHistoryEventList) {};

}
