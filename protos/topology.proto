// Copyright 2018 Juniper Networs.
// gRpc interface to CiN controller, TE Services
syntax = "proto3";

package cinc.te;

service TopologyService {

  //  RPC for topology
  rpc GetTopology(NoParameters) returns (Topology) {};

  //  RPC for node
  rpc SearchNode(SearchNodeQuery) returns (NodeList) {};
  rpc GetNode(GetNodeQuery) returns (Node) {};
  rpc BulkDeleteNode(NodeListDelete) returns (OperationStatus) {};
  rpc ListNodes(NoParameters) returns (NodeList) {};
  rpc UpdateNode(UpdateNode) returns (Node) {};
  rpc AddNode(CreateNode) returns (Node) {};
  rpc BulkAddNode(CreateNodeList) returns (NodeList) {};
  rpc DeleteNode(GetNodeQuery) returns (OperationStatus) {};

  //  RPC for maintenance
  rpc AddMaintenance(Maintenance) returns (CreateMaintenance) {};
  rpc DeleteMaintenance(GetNodeQuery) returns (OperationStatus) {};
  rpc ListMaintenances(NoParameters) returns (MaintenanceList) {};
  rpc GetMaintenance(GetNodeQuery) returns (Maintenance) {};

  //  RPC for facility
  rpc AddFacility(Facility) returns (OperationStatus) {};
  rpc DeleteFacility(GetNodeQuery) returns (OperationStatus) {};
  rpc ListFacilities(NoParameters) returns (FacilityList) {};
  rpc UpdateFacility(Facility) returns (OperationStatus) {};
  rpc GetFacility(GetNodeQuery) returns (Facility) {};

  //  RPC for link
  rpc SearchLink(SearchLinkQuery) returns (LinkList) {};
  rpc GetLink(GetNodeQuery) returns (Link) {};
  rpc ListLinks(NoParameters) returns (LinkList) {};
  rpc UpdateLink(UpdateLink) returns (Link) {};
  rpc AddLink(CreateLink) returns (Link) {};
  rpc DeleteLink(GetNodeQuery) returns (OperationStatus) {};
  rpc GetLinkDevice(GetNodeQuery) returns (Link) {};
  rpc GetLinkHistory(GetLinkHistoryQuery) returns (LinkHistoryEventList) {};
  rpc GetLinkBgpLs(GetNodeQuery) returns (Link) {};
  rpc GetLinkUser(GetNodeQuery) returns (Link) {};
}



// List of nodes
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref
message NodeList {
  // List of nodes
  repeated Node entry = 1;
}

// Type of element under maintenance.
// used by topology
// defined from topology/rpc/input/AddMaintenance/$ref/Maintenance//$ref/MaintenanceElement/$ref/MaintenanceElementIndex/$ref
enum MaintenanceElementType {
  MAINTENANCEELEMENTTYPE_NODE = 0;
  MAINTENANCEELEMENTTYPE_LINK = 1;
  MAINTENANCEELEMENTTYPE_FACILITY = 2;
}

// Node Geographical properties, currently Latitude/Longitude coordinates
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref
message NodeGeoProperties {
  // A GeoJSON Point, allowing crs and bbox
  NodeCoordinates coordinates = 1;
}

// A list of maintenance
// used by topology
// defined from topology/rpc/output/ListMaintenances/$ref
message MaintenanceList {
  // A list of maintenance
  repeated Maintenance entry = 1;
}

// ISIS Protocol Level
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols/ISISLinkTEProperties
enum ISISLevel {
  ISISLEVEL_L1 = 0;
  ISISLEVEL_L2 = 1;
  ISISLEVEL_L1L2 = 2;
}

// set of properties that can be updated (PUT) on a link
// used by topology
// defined from topology/rpc/input/UpdateLink/$ref
message UpdateLink {
  // link type
  string    linkType  = 1;
  // Comment
  string    comment   = 2;
  // link name, which can be modified
  string    name      = 3;
  // link information from Z side
  // This is a REQUIRED attribute
  Interface endZ      = 4;
  // link identifier, generated by NorthStar
  string    id        = 5;
  // link information from A side
  // This is a REQUIRED attribute
  Interface endA      = 6;
  // program ID for link
  // This is a REQUIRED attribute
  uint64    linkIndex = 7;
}

// An entry in the Link history, which consists of the information received from 
// Topology acquisition
// used by topology
// defined from topology/rpc/output/GetLinkHistory/$ref/LinkHistoryEventList/$ref
message LinkHistoryEvent {
  // Event Timestamp.
  uint64 timestamp = 1;
  oneof oneOf_1 {
    Link link      = 2;
  }
}

// Represent a single maintenance
// used by topology
// defined from topology/rpc/output/AddMaintenance/$ref
message CreateMaintenance {
  // commnent
  string                      comment                      = 1;
  // List of elements part of this maintenance
  repeated MaintenanceElement elements                     = 2;
  // Maintenance name. The name can be modified, but must be unique.
  // This is a REQUIRED attribute
  string                      name                         = 3;
  bool                        autocomplete                 = 4;
  // User creating the maintenance
  string                      user                         = 5;
  // format: date-time
  // This is a REQUIRED attribute
  string                      startTime                    = 6;
  // If set to true, the rerouted LSPs will not be optimized again after the 
  // maintenance event is ended
  bool                        noReoptimizationOnCompletion = 7;
  // The planned end time of the maintenance, if autocomplete is set to true, the 
  // NorthStar Controller will complete the maintenance at that time.
  // format: date-time
  // This is a REQUIRED attribute
  string                      endTime                      = 8;
}

// A GeoJSON Point, allowing crs and bbox
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref/NodeGeoProperties
message NodeCoordinates {
  repeated int64 coordinates = 1;
}

// For link imported from a transport controller, contains transport-specific 
// information. In this release it contains IP-to-transport links specific 
// information.
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols
message TransportLinkProperties {
  // For Transport inter-layer link, this contains the IP address of the 
  // interface the access link is connected to.
  Ipv4Reference    clientReference = 1;
  // Transport inter-layer link that is connected to that link through the 
  // transport network. This information is calculated from connectivity matrix
  LinkInterfaceRef remoteLinkInfo  = 2;
}

// OSPFv3 Link TE properties.
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols
message OSPFv3LinkTEProperties {
  uint64        metric   = 1;
  uint64        TEMetric = 2;
  repeated Srlg srlgs    = 3;
  uint64        area     = 4;
}

// SR information of a Prefix
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref/NodePrefixList/$ref/NodePrefix
message NodePrefixSR {
  // Index of the prefix in the global SR tables
  int64 index = 1;
  // Flags associated to this prefix, see 
  // draft-ietf-isis-segment-routing-extensions-07#section-2.1, Flags not defined 
  // for OSPF are 0
  int64 flags = 2;
  // Spring Algorithm (0 for ECMP-aware CSPF, 1 for strict ECMP aware CSPF)
  int64 algo  = 3;
}

// protocols configuration and information on the node
// used by topology
// defined from topology/rpc/input/UpdateNode/$ref/UpdateNode/$ref
message NodeProtocolUser {
  // PCEP properties that can be user-modified.
  NodePCEPProtocolUser PCEP       = 1;
  // ISIS properties that can be user-modified.
  NodeISISProtocol     ISIS       = 2;
  MgmtProtocols        management = 3;
  // OSPF properties that can be user-modified.
  NodeOSPFProtocol     OSPF       = 4;
  // Represent the node Segment Routing (SR) parameters
  NodeSRProtocol       SR         = 5;
}

// Represent a single facility
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/FacilityList/$ref
message Facility {
  // commnent
  string                   comment       = 1;
  // List of elements part of this facility
  repeated FacilityElement elements      = 2;
  // Facility name (can be modified)
  string                   name          = 3;
  // Identify who created the facility
  string                   source        = 4;
  // Program ID for facility
  // This is a REQUIRED attribute
  uint64                   facilityIndex = 5;
  // Identifier of the facility. This parameter is fixed on creation and cannot 
  // be updated or chenged. Default for a facility created from BGP-LS is the 
  // SRLG, and for user-created nodes is the name
  string                   id            = 6;
}

// Node PCEP Session properties and status.
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols
message NodePCEPProtocol {
  // Ipv4 address of pcc in xx.xx.xx.xx
  // format: ipv4
  string                            pccAddress                = 1;
  // remote peer pcep session parameters
  NodePCEPProtocolSessionParameters sessionParameters         = 2;
  // represents the remote peer advertised capabilites
  NodePCEPProtocolCapabilities      peerStatefullCapabilities = 3;
  // PCEP protocol operational status, Either Up or Down
  OperStatus                        operationalStatus         = 4;
  // forces NorthStar support of specific extensions
  NodePCEPProtocolExtensions        extensions                = 5;
}

// reference to an interface on a link
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols/TransportLinkProperties/$ref
message LinkInterfaceRef {
  // interface Ipv4 Address
  Ipv4Reference ipv4Address = 1;
  string        linkName    = 2;
  Node          node        = 3;
  // node local interface index
  uint64        ifIndex     = 4;
}

// Netconf provisioning protocol status
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols
message NodeNETCONFProtocol {
  // remote peer NETCONF session parameters
  NodeNETCONFProtocolSessionParameters sessionParameters  = 1;
  // Ipv4 address of peer in xx.xx.xx.xx format
  // format: ipv4
  string                               clientAddress      = 2;
  // NETCONF protocol operational status, Either Up or Down
  OperStatus                           operationalStatus  = 3;
  repeated string                      clientCapabilities = 4;
  // NETCONF provisioning protocol session state.
  NETCONFOperationState                operationalState   = 5;
}

// Interface where correlation failed
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref
message UndefinedInterface {
  Node   node           = 1;
  // This is a REQUIRED attribute
  string address        = 2;
  // This is a REQUIRED attribute
  uint64 interfaceIndex = 3;
}

// IP Prefix
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref/NodePrefixList/$ref/NodePrefix/$ref
message Ipv6Prefix {
  // prefix length
  int64  length  = 1;
  // format: ipv6
  // This is a REQUIRED attribute
  string address = 2;
}

// OSPF Link TE properties.
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols
message OSPFLinkTEProperties {
  uint64        metric   = 1;
  uint64        TEMetric = 2;
  repeated Srlg srlgs    = 3;
  uint64        area     = 4;
}

// Carry the index of an element under maintenance.
// used by topology
// defined from topology/rpc/input/AddMaintenance/$ref/Maintenance//$ref/MaintenanceElement/$ref
message MaintenanceElementIndex {
  // The index of the link, node or interface, depending on the type. If both id 
  // and index are specified, index takes precedence
  // This is a REQUIRED attribute
  uint64                 index          = 1;
  // This is a REQUIRED attribute
  MaintenanceElementType topoObjectType = 2;
}

// Input parameters for SearchNode rpc
// used by topology
// defined from topology/rpc/input/SearchNode
message SearchNodeQuery {
  // object name, string without space, comma
  string name = 1;
  string AS   = 2;
}

// Adjacency SID information.
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols/SRLinkProperties/$ref/SIDList/$ref
message AdjacencySegmentIdentifiers {
  // ISIS-Flags, the OSPF are mapped to the ISIS
  int64 flags  = 1;
  int64 weight = 2;
  int64 sid    = 3;
}

// List of SRLGs.
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref
message SrlgList {
  // List of SRLGs.
  repeated Srlg entry = 1;
}

// properties set that can used for planned node creation
// used by topology
// defined from topology/rpc/input/AddNode/$ref
message CreateNode {
  // Comment
  string                     comment          = 1 ;
  // node layer
  string                     layer            = 2 ;
  // correlated AS Number, may be present even if the node is not a BGP speaker
  ASNumber                   AutonomousSystem = 3 ;
  // node hardware type (any user string)
  string                     nodeType         = 4 ;
  // node name, which can be modified
  // This is a REQUIRED attribute
  string                     name             = 5 ;
  NodeDesignParameters       design           = 6 ;
  // node hostname
  string                     hostName         = 7 ;
  // Site ID of the node
  string                     site             = 8 ;
  repeated NodePrefix        prefixes         = 9 ;
  repeated Ipv4TaggedAddress extraIpAddresses = 10;
  // indicates if the node is a pseudo node created by the underlying IGP 
  // protocol
  bool                       pseudoNode       = 11;
  NodeProtocolUser           protocols        = 12;
  NodeGeoProperties          topology         = 13;
}

// remote peer pcep session parameters
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols/NodePCEPProtocol
message NodePCEPProtocolSessionParameters {
  // The SR maximum Stack Depth (MSD) reported by the PCC
  uint64 maximumStackDepth = 1;
  // PCEP session DeadTimer time, in seconds
  uint64 deadtimer         = 2;
  // PCEP session keepalive time, in seconds
  uint64 keepalive         = 3;
}

// message for all RPC that do not take any parameter
// used by topology-lsp, topology-transport, topology
// defined from _undef
message NoParameters {
}

// represents a single link
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref
message Link {
  // link type
  string               linkType             = 1 ;
  // Comment
  string               comment              = 2 ;
  // link information from Z side
  Interface            endZ                 = 3 ;
  // link name, which can be modified
  string               name                 = 4 ;
  // for links that are supported by a path in a bidirectional server layer this 
  // attribute reference a LSP index that represent that path in the server 
  // layer, this is the reference to the lspIndex
  int64                serverLayerReference = 5 ;
  LinkProtectionType   linkProtection       = 6 ;
  // link identifier, generated by NorthStar
  string               id                   = 7 ;
  // link information from A side
  Interface            endA                 = 8 ;
  // indicate if the link has properties coming from topology acquisition
  bool                 live                 = 9 ;
  // link operational status
  OperStatusAndPlanned operationalStatus    = 10;
  // link program ID
  uint64               linkIndex            = 11;
}

// Input parameters for SearchLink rpc
// used by topology
// defined from topology/rpc/input/SearchLink
message SearchLinkQuery {
  // object name, string without space, comma
  string name    = 1;
  string address = 2;
}

// interface, can be part of a link
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref
message Interface {
  // interface Ipv4 Address
  Ipv4Reference       ipv4Address      = 1 ;
  // This is a REQUIRED attribute
  Node                node             = 2 ;
  // User defined design properties
  DesignParameters    designParameters = 3 ;
  // MPLS local protection
  MPLSlocalProtection localProtection  = 4 ;
  string              name             = 5 ;
  // Link protection, if derived from transport topology it does also set the 
  // canFail parameter to false
  LinkProtectionType  linkProtection   = 6 ;
  // aggregated unreservedBw
  repeated Bandwidth  unreservedBw     = 7 ;
  // Coloring, Attributes, Affinity
  uint64              TEcolor          = 8 ;
  uint64              interfaceIndex   = 9 ;
  // Comment
  string              comment          = 10;
  // Link delay in millisecond
  int64               delay            = 11;
  Bandwidth           bandwidth        = 12;
  // aggregated TE metric
  uint64              TEmetric         = 13;
  repeated Srlg       srlgs            = 14;
  // node local interface index
  uint64              ifIndex          = 15;
  AdminStatus         adminStatus      = 16;
  // protocols configuration and information
  InterfaceProtocols  protocols        = 17;
  // interfaceName deduced from router configuration
  string              interfaceName    = 18;
}

// user-defined design properties
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref
message NodeDesignParameters {
  // node delay in milliseconds
  uint64                delay                   = 1;
  // the percentage of utilization that trigger a reroute based on analytics
  uint64                trafficRerouteThreshold = 2;
  // User metric
  int64                 userCost                = 3;
  // Failure simulation parameters.
  NodeFailureSimulation simulation              = 4;
}

// a numbered reference, not correlated to any object type
// used by topology-lsp, topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref
message Ipv4Reference {
  // This is a REQUIRED attribute
  string address = 1;
}

// protocols configuration and information
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface
message InterfaceProtocols {
  // ISIS Link TE properties.
  ISISLinkTEProperties    ISIS      = 1;
  // SR properties
  SRLinkProperties        SR        = 2;
  // OSPFv3 Link TE properties.
  OSPFv3LinkTEProperties  OSPFv3    = 3;
  // OSPF Link TE properties.
  OSPFLinkTEProperties    OSPF      = 4;
  // For link imported from a transport controller, contains transport-specific 
  // information. In this release it contains IP-to-transport links specific 
  // information.
  TransportLinkProperties transport = 5;
  // RSVP Link TE properties.
  RSVPLinkTEProperties    RSVP      = 6;
}

// Link Protection Type desired for this link
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref
enum LinkProtectionType {
  LINKPROTECTIONTYPE_1_PLUS_1 = 0;
  LINKPROTECTIONTYPE_UNPROTECTED = 1;
  LINKPROTECTIONTYPE_ENHANCED = 2;
  LINKPROTECTIONTYPE_SHARED = 3;
  LINKPROTECTIONTYPE_1_FOR_1 = 4;
  LINKPROTECTIONTYPE_EXTRA_TRAFFIC = 5;
}

// forces NorthStar support of specific extensions
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols/NodePCEPProtocol
message NodePCEPProtocolExtensions {
  // Support for Primary/Secondary LSP using 
  // draft-ananthakrishnan-pce-stateful-path-protection-00.
  bool lsp_association_protection = 1;
}

// ISIS Link TE properties.
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols
message ISISLinkTEProperties {
  uint64        metricL1 = 1;
  uint64        metricL2 = 2;
  // ISIS Protocol Level
  ISISLevel     level    = 3;
  // aggregated metric, if both level are present this is L2
  uint64        metric   = 4;
  uint64        TEMetric = 5;
  repeated Srlg srlgs    = 6;
}

// List of facility
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref
message FacilityList {
  // List of facility
  repeated Facility entry = 1;
}

// Represent the node Segment Routing (SR) parameters
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols
message NodeSRProtocol {
  // If true the node can be used to route SR Tunnels. This flag is set to true 
  // if the node has SRGB and a node index (Prefix with routerId role and SR 
  // properties)
  bool               enabled          = 1;
  // List of SRG Ranges
  repeated SRGBRange SRGBs            = 2;
  // The Node capabilities, as defined in 
  // draft-ietf-isis-segment-routing-extensions-07#section-3, 
  // draft-ietf-ospf-ospfv3-segment-routing-extensions-05#section-3.3
  uint64             nodeCapabilities = 3;
}

// One range
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols/NodeSRProtocol/
message SRGBRange {
  uint64 start = 1;
  uint64 range = 2;
}

// Input parameters for GetNode, DeleteNode, DeleteMaintenance, GetMaintenance, 
// DeleteFacility, GetFacility, GetLink, DeleteLink, GetLinkDevice, GetLinkBgpLs, 
// GetLinkUser, GetLsp, DeleteLsp rpcs
// used by topology
// defined from topology/rpc/input/GetNode
message GetNodeQuery {
  // TE App object index
  uint64 objectIndex = 1;
}

// Element under maintenance, a type and an id or index.
// used by topology
// defined from topology/rpc/input/AddMaintenance/$ref/Maintenance//$ref
message MaintenanceElement {
  oneof oneOf_1 {
    MaintenanceElementIndex maintenanceElementIndex = 1;
    MaintenanceElementId    maintenanceElementId    = 2;
  }
}

// Operational status
// used by topology-lsp, topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols/NodePCEPProtocol/$ref
enum OperStatus {
  OPERSTATUS_DOWN = 0;
  OPERSTATUS_UNKNOWN = 1;
  OPERSTATUS_UP = 2;
  OPERSTATUS_EMPTY = 3;
}

// Prefix information attached to a node.
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref/NodePrefixList/$ref
message NodePrefix {
  // SR information of a Prefix
  NodePrefixSR SR         = 1;
  // indicate the role of the address when its derived from a particular 
  // protocol, for instance routerID, teRouterID, ipv6address,..etc
  string       role       = 2;
  oneof oneOf_1 {
    Ipv4Prefix ipv4Prefix = 3;
    Ipv6Prefix ipv6Prefix = 4;
  }
}

// Represent a single maintenance
// used by topology
// defined from topology/rpc/input/AddMaintenance/$ref
message Maintenance {
  MaintenanceStatus           status                       = 1 ;
  // commnent
  string                      comment                      = 2 ;
  // format: date-time
  // This is a REQUIRED attribute
  string                      endTime                      = 3 ;
  // Maintence name
  string                      name                         = 4 ;
  // Program ID for maintenance
  // This is a REQUIRED attribute
  uint64                      maintenanceIndex             = 5 ;
  bool                        autocomplete                 = 6 ;
  // List of elements part of this maintenance
  repeated MaintenanceElement elements                     = 7 ;
  // User creating the maintenance
  string                      user                         = 8 ;
  // format: date-time
  // This is a REQUIRED attribute
  string                      startTime                    = 9 ;
  // If set to true, the rerouted LSPs will not be optimized again after the 
  // maintenance event is ended
  bool                        noReoptimizationOnCompletion = 10;
}

// PCEP properties that can be user-modified.
// used by topology
// defined from topology/rpc/input/UpdateNode/$ref/UpdateNode/$ref/NodeProtocolUser
message NodePCEPProtocolUser {
  // forces NorthStar support of specific extensions
  NodePCEPProtocolExtensions extensions = 1;
}

// Represent the risk source of this facility.
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/FacilityList/$ref/Facility//$ref
message FacilityElement {
  // The id of the link, node or interface, depending on the type
  // This is a REQUIRED attribute
  string              id             = 1;
  // Type of risk associated with this facility.
  // This is a REQUIRED attribute
  FacilityElementType topoObjectType = 2;
}

// schema for bulk node delete, the number of entries that can be modified at a 
// time is limited
// used by topology
// defined from topology/rpc/input/BulkDeleteNode/$ref
message NodeListDelete {
  // schema for bulk node delete, the number of entries that can be modified at a 
  // time is limited
  repeated uint64 entry = 1;
}

// represents a single node
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref
message Node {
  // Comment
  string                     comment             = 1 ;
  // node layer
  string                     layer               = 2 ;
  // node hostname
  string                     hostName            = 3 ;
  // node site ID
  string                     site                = 4 ;
  NodeDesignParameters       design              = 5 ;
  // nose identifier, which is fixed on creation and cannot be updated. For Nodes 
  // created from BGP-LS, this defaults to the node router-id, for user-created 
  // nodes this default from the name
  // This is a REQUIRED attribute
  string                     id                  = 6 ;
  // node program ID
  uint64                     nodeIndex           = 7 ;
  repeated NodePrefix        prefixes            = 8 ;
  // indicate if the node has properties coming from topology acquisition
  bool                       live                = 9 ;
  // router ID derived from protocols or device collection, read only
  // format: ipv4
  string                     routerId            = 10;
  // node hardware type (any user string)
  string                     nodeType            = 11;
  // correlated AS Number, may be present even if the node is not a BGP speaker
  ASNumber                   AutonomousSystem    = 12;
  // protocols configuration and information on the node
  NodeProtocols              protocols           = 13;
  NodeGeoProperties          topology            = 14;
  repeated Ipv4TaggedAddress extraIpAddresses    = 15;
  // indicates if the node is a pseudo node created by the underlying IGP 
  // protocol
  bool                       pseudoNode          = 16;
  // node name, which can be modified
  string                     name                = 17;
  // For logical system discovered using CLI/Netconf data, this is set for 
  // logical system and contains the hostname of the logical system parent (i.e 
  // real router). This property is read-only
  string                     logicalSystemParent = 18;
  // IPv6 router ID derived from  device collection, read only
  // format: ipv6
  string                     routerIdIPv6        = 19;
}

// ISIS Node properties
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols
message NodeISISProtocol {
  // format: ipv6
  string routerId    = 1;
  string isoAddress  = 2;
  // ISIS overload bit set (from device collection)
  bool   overloadBit = 3;
  // format: ipv6
  string TERouterId  = 4;
  string area        = 5;
}

// List of prefixes attached to a node.
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref
message NodePrefixList {
  // List of prefixes attached to a node.
  repeated NodePrefix entry = 1;
}

// List of links
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref
message LinkList {
  // List of links
  repeated Link entry = 1;
}

// siteAS Number
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref
message ASNumber {
  // This is a REQUIRED attribute
  uint64 asNumber = 1;
}

// a numbered reference, not correlated to any object type, with an optional tag
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node//$ref
message Ipv4TaggedAddress {
  // format: ipv4
  // This is a REQUIRED attribute
  string address = 1;
  string tag     = 2;
}

// List of link historical events
// used by topology
// defined from topology/rpc/output/GetLinkHistory/$ref
message LinkHistoryEventList {
  // List of link historical events
  repeated LinkHistoryEvent entry = 1;
}

// Topology view of L3 and L1 (if transport ingest has been configured). Contains 
// node, links and facilities.
// used by topology
// defined from topology/rpc/output/GetTopology/$ref
message Topology {
  // all nodes
  repeated Link     links      = 1;
  // facilities
  repeated Facility facilities = 2;
  // all nodes
  repeated Node     nodes      = 3;
}

// Carry the string id of an element under maintenance.
// used by topology
// defined from topology/rpc/input/AddMaintenance/$ref/Maintenance//$ref/MaintenanceElement/$ref
message MaintenanceElementId {
  // The id of the link, node or interface, depending on the type
  // This is a REQUIRED attribute
  string                 id             = 1;
  // This is a REQUIRED attribute
  MaintenanceElementType topoObjectType = 2;
}

// Unreserved bandwidth array
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref
message UnreservedBw {
  // Unreserved bandwidth array
  repeated Bandwidth entry = 1;
}

// RSVP Link TE properties.
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols
message RSVPLinkTEProperties {
  Bandwidth bandwidth = 1;
}

// Generic RPC operation result when no data is returned
// used by topology-lsp, topology-transport, topology
// defined from _undef
message OperationStatus {
  // HTTP status code
  uint64 status = 1;
}

// remote peer NETCONF session parameters
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols/NodeNETCONFProtocol
message NodeNETCONFProtocolSessionParameters {
  // session keepalive time, in seconds
  uint64 keepalive = 1;
}

// Management Protocol information schema
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols/$ref
message MgmtProtocols {
  // operating system Version
  string operatingSystemVersion = 1;
  // Vendor
  string vendor                 = 2;
  // operating system information
  string operatingSystem        = 3;
  // management IP address
  // format: ipv4
  string address                = 4;
}

// Failure simulation parameters.
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref/NodeDesignParameters
message NodeFailureSimulation {
  bool canFail = 1;
}

// Extends the operational status to planned elements like nodes and links
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/$ref
enum OperStatusAndPlanned {
  OPERSTATUSANDPLANNED_DOWN = 0;
  OPERSTATUSANDPLANNED_UNKNOWN = 1;
  OPERSTATUSANDPLANNED_UP = 2;
  OPERSTATUSANDPLANNED_EMPTY = 3;
  OPERSTATUSANDPLANNED_PLANNED = 4;
}

// NETCONF provisioning protocol session state.
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols/NodeNETCONFProtocol
enum NETCONFOperationState {
  NETCONFOPERATIONSTATE_SESSION_CLOSE = 0;
  NETCONFOPERATIONSTATE_CONNECTING = 1;
  NETCONFOPERATIONSTATE_DISCONNECTED = 2;
  NETCONFOPERATIONSTATE_DELETED = 3;
  NETCONFOPERATIONSTATE_CONNECTED = 4;
  NETCONFOPERATIONSTATE_INVALID_CREDENTIALS = 5;
}

// The maintenance status. The status can be set to the desired state. A planned 
// maintenance will start on the specified startTime, and canceled one will not 
// start but be kept inactive. A non-active Maintenance (planned, completed or 
// cancelled) can always be reactivated (i.e put into planned status) or deleted. 
// Once a maintenance is in progress it can only be completed or cancel.  
// Non-canceled jobs can be cancelled.    .The following state transitions are 
// allowed: graphiz file: digraph MaintenanceStates {"planned" -> "planned" [label 
// = "Modify planned maintenance " ]; "planned" -> "cancelled" [label = "Cancel 
// maintenance" ];"planned" -> "deleted"  [label = "Delete maintenance" 
// ];"completed" -> "planned"  [label = "Modify maintenance" ]; "completed" -> 
// "deleted" [label = "Delete maintenance" ];                    "in 
// progress"->"completed" [label = "Complete maintenance" ];"in 
// progress"->"cancelled" [label = "Cancel maintenance" ];"cancelled"->"planned" 
// [label = "Modify maintenance" ]; "cancelled"->"deleted" [label = "Delete 
// maintenance" ];}
// used by topology
// defined from topology/rpc/input/AddMaintenance/$ref/Maintenance/$ref
enum MaintenanceStatus {
  MAINTENANCESTATUS_CANCELLED = 0;
  MAINTENANCESTATUS_DELETED = 1;
  MAINTENANCESTATUS_COMPLETED = 2;
  MAINTENANCESTATUS_PLANNED = 3;
}

// BGP Node properties
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols
message NodeBGPProtocol {
  // default AS
  ASNumber AutonomousSystem = 1;
  string   id               = 2;
}

// Interface administrative status
// used by topology-lsp, topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref
enum AdminStatus {
  ADMINSTATUS_DOWN = 0;
  ADMINSTATUS_UNKNOWN = 1;
  ADMINSTATUS_UP = 2;
  ADMINSTATUS_PLANNED = 3;
}

// schema for bulk NODE creation, the number of entries that can be modified at a 
// time is limited
// used by topology
// defined from topology/rpc/input/BulkAddNode/$ref
message CreateNodeList {
  // schema for bulk NODE creation, the number of entries that can be modified at 
  // a time is limited
  repeated CreateNode entry = 1;
}

// IP Prefix
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/$ref/NodePrefixList/$ref/NodePrefix/$ref
message Ipv4Prefix {
  // prefix length
  int64  length  = 1;
  // format: ipv4
  // This is a REQUIRED attribute
  string address = 2;
}

// SR properties
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols
message SRLinkProperties {
  repeated AdjacencySegmentIdentifiers SIDs = 1;
}

// set of parameters accepted when creating, using POST, a planned link
// used by topology
// defined from topology/rpc/input/AddLink/$ref
message CreateLink {
  // link type
  string    linkType = 1;
  // Comment
  string    comment  = 2;
  // link name, which can be modified
  string    name     = 3;
  // link information from Z side
  // This is a REQUIRED attribute
  Interface endZ     = 4;
  // link information from A side
  // This is a REQUIRED attribute
  Interface endA     = 5;
}

// List of SIDs
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/InterfaceProtocols/SRLinkProperties/$ref
message SIDList {
  // List of SIDs
  repeated AdjacencySegmentIdentifiers entry = 1;
}

// OSPF Node properties
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols
message NodeOSPFProtocol {
  // format: ipv4
  string routerId    = 1;
  // OSPF reference bandwidth (read-only,from device collection)
  int64  referenceBw = 2;
  // format: ipv4
  string TERouterId  = 3;
  // OSPF overload bit set (from device collection)
  bool   overloadBit = 4;
}

// A Shared Risk Link Group (SRLG), this is the TE equivalent of a Link Facilituy. 
// This is a number or string representing a given risk. For instance two link 
// sharing the same duct should have one SRLG/Facility representing that shared 
// risk (the duct).
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/SrlgList/$ref
message Srlg {
  string srlgName  = 1;
  uint64 srlgValue = 2;
}

// properties set that can used to update a planned Node--other properties can be 
// set, but they will be ignored.
// used by topology
// defined from topology/rpc/input/UpdateNode/$ref
message UpdateNode {
  // Comment
  string                     comment          = 1 ;
  // Program ID for node
  // This is a REQUIRED attribute
  uint64                     nodeIndex        = 2 ;
  // node layer
  string                     layer            = 3 ;
  // correlated AS Number, may be present even if the node is not a BGP speaker
  ASNumber                   AutonomousSystem = 4 ;
  // indicates if the node is a pseudo node created by the underlying IGP 
  // protocol
  bool                       pseudoNode       = 5 ;
  // node name, which can be modified
  string                     name             = 6 ;
  NodeDesignParameters       design           = 7 ;
  // node hostname
  string                     hostName         = 8 ;
  // Site ID of the node
  string                     site             = 9 ;
  repeated NodePrefix        prefixes         = 10;
  repeated Ipv4TaggedAddress extraIpAddresses = 11;
  // hardware node type (any user string)
  string                     nodeType         = 12;
  // node identifier, which is fixed on creation and cannot be updated--default 
  // for Nodes created from BGP-LS is the node router-id, for user-created nodes 
  // it is the name
  string                     id               = 13;
  NodeProtocolUser           protocols        = 14;
  NodeGeoProperties          topology         = 15;
}

// Input parameters for GetLinkHistory, GetLspHistory rpcs
// used by topology
// defined from topology/rpc/input/GetLinkHistory
message GetLinkHistoryQuery {
  // TE App object index
  uint64 objectIndex = 1;
  string start       = 2;
  string end         = 3;
}

// protocols configuration and information on the node
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node
message NodeProtocols {
  // Node PCEP Session properties and status.
  NodePCEPProtocol    PCEP       = 1;
  // Netconf provisioning protocol status
  NodeNETCONFProtocol NETCONF    = 2;
  MgmtProtocols       management = 3;
  // ISIS Node properties
  NodeISISProtocol    ISIS       = 4;
  // Represent the node Segment Routing (SR) parameters
  NodeSRProtocol      SR         = 5;
  // BGP Node properties
  NodeBGPProtocol     BGP        = 6;
  // OSPF Node properties
  NodeOSPFProtocol    OSPF       = 7;
}

// MPLS local protection
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface
enum MPLSlocalProtection {
  MPLSLOCALPROTECTION_LINK = 0;
  MPLSLOCALPROTECTION_NODELINK = 1;
}

// User defined design properties
// used by topology-lsp, topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface
message DesignParameters {
  // Indicate if the link can fail or not. This parameter is evaluated when 
  // routing LSP with useProtectedLinks set to Protected.
  bool   canFail                   = 1;
  // Unit: milliseconds. Latency increment that trigger LSP rerouting. If the 
  // link latency increase more than the value between two collection, the LSPs 
  // on that link will be rerouted
  uint64 latencyIncrementThreshold = 2;
  // If the packet loss on the link exceed the value, the LSPs on the link will 
  // be rerouted.
  uint64 packetLossThreshold       = 3;
  // link distance, unit:?
  uint64 distance                  = 4;
  // The percentage of utilization that trigger a reroute based on analytics
  uint64 trafficRerouteThreshold   = 5;
  // User metric
  uint64 userCost                  = 6;
}

// Bandwidth value in from 0 - 10,000,000,000[bBKkMmGg]
// used by topology-lsp, topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/UnreservedBw/$ref
message Bandwidth {
  oneof oneOf_1 {
    string strValue = 1;
    uint64 intValue = 2;
  }
}

// represents the remote peer advertised capabilites
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/LinkList/$ref/Link/Interface/$ref/Interface/$ref/Node/NodeProtocols/NodePCEPProtocol
message NodePCEPProtocolCapabilities {
  // Stateful PCE P2MP LSP Update
  bool p2mpUpdate        = 1;
  // Segment Routing capability
  bool SRCapability      = 2;
  // Stateful PCE P2MP LSP Create
  bool p2mpInstantiation = 3;
  // Stateful PCE LSP Update
  bool lspUpdate         = 4;
  // Stateful PCE LSP Create
  bool lspInstantiation  = 5;
  // Stateful PCE P2MP LSP reporting
  bool p2mp              = 6;
}

// Type of risk associated with this facility.
// used by topology
// defined from topology/rpc/output/GetTopology/$ref/Topology/$ref/FacilityList/$ref/Facility//$ref/FacilityElement
enum FacilityElementType {
  FACILITYELEMENTTYPE_NODE = 0;
  FACILITYELEMENTTYPE_INTERFACE = 1;
  FACILITYELEMENTTYPE_LINK = 2;
}
