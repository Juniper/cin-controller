// Copyright 2018 Juniper Networs.
// gRpc interface to CiN controller, TE Services
syntax = "proto3";

package cinc.te;

service TopologyLspService {

  //  RPC for lsp
  rpc SearchLsp(SearchLspQuery) returns (LspList) {};
  rpc DeleteLSPs(LspListDelete) returns (OperationStatus) {};
  rpc ListLsps(NoParameters) returns (LspList) {};

  //  RPC for lspMesh
  rpc AddLspMesh(LspMesh) returns (LspMesh) {};
  rpc UpdateLspMesh(LspMesh) returns (LspMesh) {};
  rpc DeleteLspMesh(LspMesh) returns (OperationStatus) {};
}



// LSP routing policies
message PlannedPolicies {
  // LSP delay-based metric policies
  DelayBasedMetrics delayBasedMetrics = 1;
}

// Input parameters for SearchLsp rpc
message SearchLspQuery {
  // object name, string without space, comma
  string     name       = 1;
  string     from       = 2;
  // Operational status
  OperStatus operStatus = 3;
}

// Node or Adjacency Identifier (NAI) type
enum NaiType {
  NAITYPE_IPV4NODENAI = 0;
  NAITYPE_IPV6ADJACENCYNAI = 1;
  NAITYPE_IPV6NODENAI = 2;
  NAITYPE_IPV4ADJACENCYNAI = 3;
}

// An LSP RRO Hop
message RROHop {
  // for RRO Hops only, indicate if the protection is available
  bool                    protectionAvailable   = 1;
  // for RRO Hops only, indicate if the protection is active
  bool                    protectionInUse       = 2;
  oneof oneOf_1 {
    Ipv4Reference         ipv4Reference         = 3;
    UnnumberedIfReference unnumberedIfReference = 4;
  }
}

// define the non-tunnel attributes of an TE-LSP, the one that may be modified
message LspPlannedPathProperties {
  Bandwidth        bandwidth     = 1;
  DesignParameters design        = 2;
  PlannedPolicies  policy        = 3;
  // routing operational status, when Down it means that no route has been found. 
  // Not valid on POST/PUT
  OperStatus       routingStatus = 4;
}

// define the live-only tunnel properties, some properties are duplicated on 
// purpose with plannedProperties, because of schema limitation 
// (additionalProperties not expressed well with oneOf
message LspLivePathProperties {
  AdminStatus           adminStatus        = 1 ;
  repeated RROHop       rro                = 2 ;
  // Indicates if a tunnel is FRR-protected or not
  FrrLiveProtectionFlag frrLocalProtection = 3 ;
  // Setup priority
  uint64                setupPriority      = 4 ;
  LspColor              color              = 5 ;
  // resulting IGP metric of the tunnel
  uint64                metric             = 6 ;
  Bandwidth             bandwidth          = 7 ;
  // LSP Operational status: Usual operational status and the one from dynamic 
  // signaling protocol.
  LspOperationalStatus  operationalStatus  = 8 ;
  // Optional path name, fixed once LSP created
  string                pathName           = 9 ;
  // Holding priority
  uint64                holdingPriority    = 10;
  // Signaled LSP Path.
  repeated SignaledEro  ero                = 11;
  // the object carries a set of optional properties
  SignalingExtensions   options            = 12;
  // Binding SID assigned to the LSP
  uint64                bindingSID         = 13;
}

// LSP Operational status: Usual operational status and the one from dynamic 
// signaling protocol.
message LspOperationalStatus {
  oneof oneOf_1 {
    OperStatus            operStatus            = 1;
    LspExtendedOperStatus lspExtendedOperStatus = 2;
  }
}

// Minimum LSP identification
message LspReference {
  // Program ID for lsp
  // This is a REQUIRED attribute
  uint64 lspIndex = 1;
}

// Network address in SR ERO
message SRNodeNetworkAddress {
  string  address        = 1;
  NaiType topoObjectType = 2;
}

// schema for bulk LSP delete, the number of entries that can be modified at a time 
// is limited
message LspListDelete {
  repeated LspReference entry = 1;
}

// message for all RPC that do not take any parameter
message NoParameters {
}

// a numbered reference, not correlated to any object type
message Ipv4Reference {
  // This is a REQUIRED attribute
  string address = 1;
}

// a numbered reference, not correlated to any object type
message HopWithId {
  // object id
  // This is a REQUIRED attribute
  string     id             = 1;
  // SR ERO Hop Type. Hop ID will be used in case a bindingSID LSP is used.
  // This is a REQUIRED attribute
  EroHopType topoObjectType = 2;
}

// An Segment Routing (SR) Hop
message SREROHop {
  // the adjacency SID
  uint64     sid            = 1;
  // Node or Adjacency Identifier (NAI)
  Nai        nai            = 2;
  // indicates if the Hop is a loose Hop
  bool       loose          = 3;
  // This is a REQUIRED attribute
  EroHopType topoObjectType = 4;
}

// LSP color, as per draft-filsfils-spring-segment-routing-policy
message LspColor {
  oneof oneOf_1 {
    string stringValue = 1;
    int64  intValue    = 2;
  }
}

// define a te-lsp of a tunnel
message Lsp {
  // Program ID for lsp
  // This is a REQUIRED attribute
  uint64                   lspIndex          = 1;
  // tunnel source address, should reference an interface or a node, same for all 
  // TE-LSP of a tunnel
  LspEndpoint              from              = 2;
  // tunnel name, several TE-LSP may have the same name, they are part of the 
  // same tunnel
  string                   name              = 3;
  // tunnel destination, should reference an interface or a node, same for all 
  // TE-LSP of a tunnel
  LspEndpoint              to                = 4;
  // planned path state, this attribute is read-write, can be modified in an 
  // update
  LspPlannedPathProperties plannedProperties = 5;
  // state of the path in the PCC, which is read-only
  LspLivePathProperties    liveProperties    = 6;
  LspOperationalStatus     operationalStatus = 7;
}

// Operational status
enum OperStatus {
  OPERSTATUS_DOWN = 0;
  OPERSTATUS_UNKNOWN = 1;
  OPERSTATUS_UP = 2;
  OPERSTATUS_EMPTY = 3;
}

// Network address in SR ERO
message SRAdjacencyNetworkAddress {
  string  remoteAddress  = 1;
  string  localAddress   = 2;
  // Node or Adjacency Identifier (NAI) type
  NaiType topoObjectType = 3;
}

// LSP delay-based metric policies
message DelayBasedMetrics {
  // High delay Threshold: when the calculated delay is greater than the 
  // threshold, the LSP is configured using the highDelayMetric
  // This is a REQUIRED attribute
  uint64 highDelayThreshold = 1;
  // Low delay Threshold: when the calculated delay is lower than the threshold, 
  // the LSP is configured using the metric if set (otherwise the LSP live 
  // metric)
  // This is a REQUIRED attribute
  uint64 lowDelayThreshold  = 2;
  // High metric value
  // This is a REQUIRED attribute
  uint64 highDelayMetric    = 3;
  // Low metric value
  uint64 lowDelayMetric     = 4;
}

// Generic RPC operation result when no data is returned
message OperationStatus {
  // HTTP status code
  uint64 status = 1;
}

// Endoint by ip or hostname
message MeshEndpoint {
  oneof oneOf_1 {
    Ipv4Reference routerId = 1;
    // ISIS hostname
    string        hostname = 2;
  }
}

// A mesh of LSPs from a set of endoint to a set of endpooints
message LspMesh {
  // Path contraints
  LspPlannedPathProperties plannedProperties = 1;
  // List of tunnel destinations
  // This is a REQUIRED attribute
  repeated MeshEndpoint    to                = 2;
  // List of tunnel sources
  // This is a REQUIRED attribute
  repeated MeshEndpoint    from              = 3;
  // Mesh name, the LSP name will be based on it
  // This is a REQUIRED attribute
  string                   name              = 4;
  repeated Lsp             lsps              = 5;
}

// FIXME b
message EndpointList {
  repeated MeshEndpoint entry = 1;
}

// Signaled LSP Path.
message SignaledPath {
  repeated SignaledEro entry = 1;
}

// Signaled LSP Hop.
message SignaledEro {
  oneof oneOf_1 {
    EROHop   EROHop   = 1;
    SREROHop SREROHop = 2;
  }
}

// Node or Adjacency Identifier (NAI)
message Nai {
  oneof oneOf_1 {
    SRAdjacencyNetworkAddress SRAdjacencyNetworkAddress = 1;
    SRNodeNetworkAddress      SRNodeNetworkAddress      = 2;
  }
}

// the object carries a set of optional properties
message SignalingExtensions {
  // Read-only parameter, indicates if auto-bandwidth is activated on the LSP. 
  // Valid only on Juniper Routers. When set the bandwidth is controlled by the 
  // PCC, bandwidth set from REST or UI is ignored.
  bool   autoBandwidth = 1;
  // Read-only parameter, indicates if the TE-LSP is part of a TE++ LSp setup. 
  // All TE-LSPs in the same TE++Group share the same TE++Id
  uint64 TEPlusPlusId  = 2;
}

// Interface administrative status
enum AdminStatus {
  ADMINSTATUS_DOWN = 0;
  ADMINSTATUS_UNKNOWN = 1;
  ADMINSTATUS_UP = 2;
  ADMINSTATUS_PLANNED = 3;
}

// tunnel source address, should reference an interface or a node, same for all 
// TE-LSP of a tunnel
message LspEndpoint {
  oneof oneOf_1 {
    Ipv4Reference ipv4Reference = 1;
  }
}

// List of LSPs.
message LspList {
  repeated Lsp entry = 1;
}

// a unnumbered reference, not correlated to any object type
message UnnumberedIfReference {
  // This is a REQUIRED attribute
  string node      = 1;
  // This is a REQUIRED attribute
  uint64 ifIndex   = 2;
  // The Link name, if present
  string address   = 3;
  // Optional attribute, refer to the link index
  uint64 linkIndex = 4;
}

// Lsp additional operation status
enum LspExtendedOperStatus {
  LSPEXTENDEDOPERSTATUS_ACTIVE = 0;
  LSPEXTENDEDOPERSTATUS_GOINGUP = 1;
  LSPEXTENDEDOPERSTATUS_GOINGDOWN = 2;
}

// User defined design properties
message DesignParameters {
  // Indicate if the link can fail or not. This parameter is evaluated when 
  // routing LSP with useProtectedLinks set to Protected.
  bool   canFail                   = 1;
  // Unit: milliseconds. Latency increment that trigger LSP rerouting. If the 
  // link latency increase more than the value between two collection, the LSPs 
  // on that link will be rerouted
  uint64 latencyIncrementThreshold = 2;
  // If the packet loss on the link exceed the value, the LSPs on the link will 
  // be rerouted.
  uint64 packetLossThreshold       = 3;
  // link distance, unit:?
  uint64 distance                  = 4;
  // The percentage of utilization that trigger a reroute based on analytics
  uint64 trafficRerouteThreshold   = 5;
  // User metric
  uint64 userCost                  = 6;
}

// SR ERO Hop Type. Hop ID will be used in case a bindingSID LSP is used.
enum EroHopType {
  EROHOPTYPE_SID = 0;
  EROHOPTYPE_ADJACENCYSID = 1;
  EROHOPTYPE_HOPID = 2;
  EROHOPTYPE_NODESID = 3;
}

// Bandwidth value in from 0 - 10,000,000,000[bBKkMmGg]
message Bandwidth {
  oneof oneOf_1 {
    string strValue = 1;
    uint64 intValue = 2;
  }
}

// Indicates if a tunnel is FRR-protected or not
message FrrLiveProtectionFlag {
  // indicate if local protection is requested for the LSP.
  bool enabled = 1;
}

// an LSP ERO Hop, not correlated
message EROHop {
  // indicates if the Hop is a loose Hop
  bool                    loose                 = 1;
  oneof oneOf_1 {
    Ipv4Reference         ipv4Reference         = 2;
    UnnumberedIfReference unnumberedIfReference = 3;
    HopWithId             hopWithId             = 4;
  }
}
